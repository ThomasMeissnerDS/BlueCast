Search.setIndex({"docnames": ["Advanced usage", "Basic usage", "Customizing configurations and objects", "EDA", "Experiment tracking", "Installation", "Model evaluation", "Model explainability (XAI)", "Monitoring", "Uncertainty quantification", "autoapi/bluecast/blueprints/cast/index", "autoapi/bluecast/blueprints/cast_cv/index", "autoapi/bluecast/blueprints/cast_cv_regression/index", "autoapi/bluecast/blueprints/cast_regression/index", "autoapi/bluecast/blueprints/index", "autoapi/bluecast/config/base_classes/index", "autoapi/bluecast/config/index", "autoapi/bluecast/config/training_config/index", "autoapi/bluecast/conformal_prediction/base_classes/index", "autoapi/bluecast/conformal_prediction/conformal_prediction/index", "autoapi/bluecast/conformal_prediction/conformal_prediction_regression/index", "autoapi/bluecast/conformal_prediction/effectiveness_nonconformity_measures/index", "autoapi/bluecast/conformal_prediction/evaluation/index", "autoapi/bluecast/conformal_prediction/index", "autoapi/bluecast/conformal_prediction/nonconformity_measures/index", "autoapi/bluecast/conformal_prediction/nonconformity_measures_regression/index", "autoapi/bluecast/eda/analyse/index", "autoapi/bluecast/eda/data_leakage_checks/index", "autoapi/bluecast/eda/index", "autoapi/bluecast/evaluation/eval_metrics/index", "autoapi/bluecast/evaluation/index", "autoapi/bluecast/evaluation/shap_values/index", "autoapi/bluecast/experimentation/index", "autoapi/bluecast/experimentation/tracking/index", "autoapi/bluecast/general_utils/general_utils/index", "autoapi/bluecast/general_utils/index", "autoapi/bluecast/index", "autoapi/bluecast/ml_modelling/base_classes/index", "autoapi/bluecast/ml_modelling/index", "autoapi/bluecast/ml_modelling/xgboost/index", "autoapi/bluecast/ml_modelling/xgboost_regression/index", "autoapi/bluecast/monitoring/data_monitoring/index", "autoapi/bluecast/monitoring/index", "autoapi/bluecast/preprocessing/category_encoder_orchestration/index", "autoapi/bluecast/preprocessing/custom/index", "autoapi/bluecast/preprocessing/datetime_features/index", "autoapi/bluecast/preprocessing/encode_target_labels/index", "autoapi/bluecast/preprocessing/feature_selection/index", "autoapi/bluecast/preprocessing/feature_types/index", "autoapi/bluecast/preprocessing/index", "autoapi/bluecast/preprocessing/nulls_and_infs/index", "autoapi/bluecast/preprocessing/onehot_encoding/index", "autoapi/bluecast/preprocessing/schema_checks/index", "autoapi/bluecast/preprocessing/target_encoding/index", "autoapi/bluecast/preprocessing/train_test_split/index", "autoapi/bluecast/tests/index", "autoapi/bluecast/tests/make_data/create_data/index", "autoapi/bluecast/tests/make_data/index", "autoapi/bluecast/tests/test_analyse/index", "autoapi/bluecast/tests/test_cast/index", "autoapi/bluecast/tests/test_cast_binary_conformal_prediction/index", "autoapi/bluecast/tests/test_cast_cv/index", "autoapi/bluecast/tests/test_cast_cv_binary_conformal_prediction/index", "autoapi/bluecast/tests/test_cast_cv_multiclass/index", "autoapi/bluecast/tests/test_cast_cv_multiclass_conformal_prediction/index", "autoapi/bluecast/tests/test_cast_cv_regression/index", "autoapi/bluecast/tests/test_cast_regression/index", "autoapi/bluecast/tests/test_category_encoder_orchestrator/index", "autoapi/bluecast/tests/test_check_gpu_support/index", "autoapi/bluecast/tests/test_conformal_prediction/index", "autoapi/bluecast/tests/test_conformal_prediction_evaluation/index", "autoapi/bluecast/tests/test_conformal_prediction_regression/index", "autoapi/bluecast/tests/test_custom_processing_base_class/index", "autoapi/bluecast/tests/test_data_leakage_checks/index", "autoapi/bluecast/tests/test_data_monitoring/index", "autoapi/bluecast/tests/test_datetime_features/index", "autoapi/bluecast/tests/test_effectiveness_nonconformity_measures/index", "autoapi/bluecast/tests/test_encode_target_labels/index", "autoapi/bluecast/tests/test_experiment_tracker/index", "autoapi/bluecast/tests/test_feature_type_detector/index", "autoapi/bluecast/tests/test_fine_tune/index", "autoapi/bluecast/tests/test_load_for_production/index", "autoapi/bluecast/tests/test_nonconformity_measures/index", "autoapi/bluecast/tests/test_nonconformity_measures_regression/index", "autoapi/bluecast/tests/test_nulls_and_infs/index", "autoapi/bluecast/tests/test_onehot_encoding/index", "autoapi/bluecast/tests/test_save_to_production/index", "autoapi/bluecast/tests/test_schema_checks/index", "autoapi/bluecast/tests/test_shap_explanations/index", "autoapi/bluecast/tests/test_target_encoding_binary/index", "autoapi/bluecast/tests/test_target_encoding_multiclass/index", "autoapi/bluecast/tests/test_train_test_split/index", "autoapi/conf/index", "autoapi/index", "index"], "filenames": ["Advanced usage.md", "Basic usage.md", "Customizing configurations and objects.md", "EDA.md", "Experiment tracking.md", "Installation.md", "Model evaluation.md", "Model explainability (XAI).md", "Monitoring.md", "Uncertainty quantification.md", "autoapi/bluecast/blueprints/cast/index.rst", "autoapi/bluecast/blueprints/cast_cv/index.rst", "autoapi/bluecast/blueprints/cast_cv_regression/index.rst", "autoapi/bluecast/blueprints/cast_regression/index.rst", "autoapi/bluecast/blueprints/index.rst", "autoapi/bluecast/config/base_classes/index.rst", "autoapi/bluecast/config/index.rst", "autoapi/bluecast/config/training_config/index.rst", "autoapi/bluecast/conformal_prediction/base_classes/index.rst", "autoapi/bluecast/conformal_prediction/conformal_prediction/index.rst", "autoapi/bluecast/conformal_prediction/conformal_prediction_regression/index.rst", "autoapi/bluecast/conformal_prediction/effectiveness_nonconformity_measures/index.rst", "autoapi/bluecast/conformal_prediction/evaluation/index.rst", "autoapi/bluecast/conformal_prediction/index.rst", "autoapi/bluecast/conformal_prediction/nonconformity_measures/index.rst", "autoapi/bluecast/conformal_prediction/nonconformity_measures_regression/index.rst", "autoapi/bluecast/eda/analyse/index.rst", "autoapi/bluecast/eda/data_leakage_checks/index.rst", "autoapi/bluecast/eda/index.rst", "autoapi/bluecast/evaluation/eval_metrics/index.rst", "autoapi/bluecast/evaluation/index.rst", "autoapi/bluecast/evaluation/shap_values/index.rst", "autoapi/bluecast/experimentation/index.rst", "autoapi/bluecast/experimentation/tracking/index.rst", "autoapi/bluecast/general_utils/general_utils/index.rst", "autoapi/bluecast/general_utils/index.rst", "autoapi/bluecast/index.rst", "autoapi/bluecast/ml_modelling/base_classes/index.rst", "autoapi/bluecast/ml_modelling/index.rst", "autoapi/bluecast/ml_modelling/xgboost/index.rst", "autoapi/bluecast/ml_modelling/xgboost_regression/index.rst", "autoapi/bluecast/monitoring/data_monitoring/index.rst", "autoapi/bluecast/monitoring/index.rst", "autoapi/bluecast/preprocessing/category_encoder_orchestration/index.rst", "autoapi/bluecast/preprocessing/custom/index.rst", "autoapi/bluecast/preprocessing/datetime_features/index.rst", "autoapi/bluecast/preprocessing/encode_target_labels/index.rst", "autoapi/bluecast/preprocessing/feature_selection/index.rst", "autoapi/bluecast/preprocessing/feature_types/index.rst", "autoapi/bluecast/preprocessing/index.rst", "autoapi/bluecast/preprocessing/nulls_and_infs/index.rst", "autoapi/bluecast/preprocessing/onehot_encoding/index.rst", "autoapi/bluecast/preprocessing/schema_checks/index.rst", "autoapi/bluecast/preprocessing/target_encoding/index.rst", "autoapi/bluecast/preprocessing/train_test_split/index.rst", "autoapi/bluecast/tests/index.rst", "autoapi/bluecast/tests/make_data/create_data/index.rst", "autoapi/bluecast/tests/make_data/index.rst", "autoapi/bluecast/tests/test_analyse/index.rst", "autoapi/bluecast/tests/test_cast/index.rst", "autoapi/bluecast/tests/test_cast_binary_conformal_prediction/index.rst", "autoapi/bluecast/tests/test_cast_cv/index.rst", "autoapi/bluecast/tests/test_cast_cv_binary_conformal_prediction/index.rst", "autoapi/bluecast/tests/test_cast_cv_multiclass/index.rst", "autoapi/bluecast/tests/test_cast_cv_multiclass_conformal_prediction/index.rst", "autoapi/bluecast/tests/test_cast_cv_regression/index.rst", "autoapi/bluecast/tests/test_cast_regression/index.rst", "autoapi/bluecast/tests/test_category_encoder_orchestrator/index.rst", "autoapi/bluecast/tests/test_check_gpu_support/index.rst", "autoapi/bluecast/tests/test_conformal_prediction/index.rst", "autoapi/bluecast/tests/test_conformal_prediction_evaluation/index.rst", "autoapi/bluecast/tests/test_conformal_prediction_regression/index.rst", "autoapi/bluecast/tests/test_custom_processing_base_class/index.rst", "autoapi/bluecast/tests/test_data_leakage_checks/index.rst", "autoapi/bluecast/tests/test_data_monitoring/index.rst", "autoapi/bluecast/tests/test_datetime_features/index.rst", "autoapi/bluecast/tests/test_effectiveness_nonconformity_measures/index.rst", "autoapi/bluecast/tests/test_encode_target_labels/index.rst", "autoapi/bluecast/tests/test_experiment_tracker/index.rst", "autoapi/bluecast/tests/test_feature_type_detector/index.rst", "autoapi/bluecast/tests/test_fine_tune/index.rst", "autoapi/bluecast/tests/test_load_for_production/index.rst", "autoapi/bluecast/tests/test_nonconformity_measures/index.rst", "autoapi/bluecast/tests/test_nonconformity_measures_regression/index.rst", "autoapi/bluecast/tests/test_nulls_and_infs/index.rst", "autoapi/bluecast/tests/test_onehot_encoding/index.rst", "autoapi/bluecast/tests/test_save_to_production/index.rst", "autoapi/bluecast/tests/test_schema_checks/index.rst", "autoapi/bluecast/tests/test_shap_explanations/index.rst", "autoapi/bluecast/tests/test_target_encoding_binary/index.rst", "autoapi/bluecast/tests/test_target_encoding_multiclass/index.rst", "autoapi/bluecast/tests/test_train_test_split/index.rst", "autoapi/conf/index.rst", "autoapi/index.rst", "index.md"], "titles": ["Advanced usage", "Basic usage", "Customizing configurations and objects", "Explanatory analysis", "Experiment tracking", "Installation", "&lt;no title&gt;", "Model explainability (XAI)", "Monitoring", "Uncertainty quantification", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.blueprints.cast</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.blueprints.cast_cv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.blueprints.cast_cv_regression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.blueprints.cast_regression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.blueprints</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.config.base_classes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.config.training_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.conformal_prediction.base_classes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.conformal_prediction.conformal_prediction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.conformal_prediction.conformal_prediction_regression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.conformal_prediction.effectiveness_nonconformity_measures</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.conformal_prediction.evaluation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.conformal_prediction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.conformal_prediction.nonconformity_measures</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.conformal_prediction.nonconformity_measures_regression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.eda.analyse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.eda.data_leakage_checks</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.eda</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.evaluation.eval_metrics</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.evaluation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.evaluation.shap_values</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.experimentation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.experimentation.tracking</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.general_utils.general_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.general_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.ml_modelling.base_classes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.ml_modelling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.ml_modelling.xgboost</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.ml_modelling.xgboost_regression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.monitoring.data_monitoring</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.monitoring</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.preprocessing.category_encoder_orchestration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.preprocessing.custom</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.preprocessing.datetime_features</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.preprocessing.encode_target_labels</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.preprocessing.feature_selection</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.preprocessing.feature_types</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.preprocessing</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.preprocessing.nulls_and_infs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.preprocessing.onehot_encoding</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.preprocessing.schema_checks</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.preprocessing.target_encoding</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.preprocessing.train_test_split</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.tests</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.tests.make_data.create_data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.tests.make_data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.tests.test_analyse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.tests.test_cast</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.tests.test_cast_binary_conformal_prediction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.tests.test_cast_cv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.tests.test_cast_cv_binary_conformal_prediction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.tests.test_cast_cv_multiclass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.tests.test_cast_cv_multiclass_conformal_prediction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.tests.test_cast_cv_regression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.tests.test_cast_regression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.tests.test_category_encoder_orchestrator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.tests.test_check_gpu_support</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.tests.test_conformal_prediction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.tests.test_conformal_prediction_evaluation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.tests.test_conformal_prediction_regression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.tests.test_custom_processing_base_class</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.tests.test_data_leakage_checks</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.tests.test_data_monitoring</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.tests.test_datetime_features</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.tests.test_effectiveness_nonconformity_measures</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.tests.test_encode_target_labels</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.tests.test_experiment_tracker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.tests.test_feature_type_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.tests.test_fine_tune</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.tests.test_load_for_production</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.tests.test_nonconformity_measures</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.tests.test_nonconformity_measures_regression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.tests.test_nulls_and_infs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.tests.test_onehot_encoding</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.tests.test_save_to_production</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.tests.test_schema_checks</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.tests.test_shap_explanations</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.tests.test_target_encoding_binary</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.tests.test_target_encoding_multiclass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bluecast.tests.test_train_test_split</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">conf</span></code>", "API Reference", "BlueCast"], "terms": {"while": [0, 3, 5, 7, 94], "default": [0, 2, 7, 8, 10, 13, 17, 29, 33, 39, 40, 41, 47, 94], "behaviour": [0, 2, 10, 13], "bluecast": [0, 1, 2, 3, 4, 5, 8, 92, 93], "i": [0, 1, 2, 3, 4, 5, 7, 9, 10, 11, 12, 13, 17, 21, 22, 24, 25, 26, 27, 29, 31, 33, 37, 41, 43, 44, 46, 47, 48, 50, 51, 53, 54, 59, 61, 63, 65, 66, 68, 94], "simpl": [0, 1, 3, 10, 13, 33], "train": [0, 3, 4, 8, 9, 10, 11, 12, 13, 17, 26, 31, 33, 39, 40, 44, 51, 52, 53, 54, 65, 68, 94], "test": [0, 2, 3, 8, 9, 10, 13, 17, 26, 31, 33, 36, 41, 52, 54, 93, 94], "split": [0, 3, 9, 10, 11, 12, 13, 17, 33, 54], "can": [0, 1, 2, 3, 4, 7, 9, 10, 11, 12, 13, 17, 22, 24, 25, 31, 33, 39, 40, 41, 44, 46, 48, 50, 53, 54, 65, 94], "easili": [0, 3], "from": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 13, 15, 17, 24, 33, 39, 40, 44, 45, 46, 53, 65, 94], "blueprint": [0, 1, 2, 4, 9, 17, 36, 93, 94], "cast": [0, 1, 2, 3, 4, 9, 14, 36, 48, 93, 94], "import": [0, 1, 2, 3, 4, 7, 8, 9, 31, 34, 94], "config": [0, 2, 7, 10, 11, 12, 13, 33, 36, 39, 40, 93], "training_config": [0, 2, 4, 10, 11, 12, 13, 15, 16, 33, 36, 39, 40, 93], "trainingconfig": [0, 2, 4, 10, 11, 12, 13, 15, 17, 33, 39, 40], "creat": [0, 2, 5, 9, 10, 11, 12, 13, 26, 33, 46, 53, 93, 94], "custom": [0, 7, 10, 11, 12, 13, 17, 33, 36, 39, 40, 47, 49, 65, 93, 94], "adjust": [0, 2, 7, 17, 94], "gener": [0, 2, 17, 34, 93], "paramet": [0, 2, 3, 7, 9, 10, 11, 12, 13, 17, 18, 19, 20, 22, 26, 27, 29, 33, 41, 68], "train_config": [0, 2], "hypertuning_cv_fold": [0, 17], "5": [0, 2, 7, 9, 17, 43, 47], "1": [0, 2, 4, 9, 10, 11, 12, 13, 17, 21, 22, 24, 29, 31, 41, 92, 93], "pass": [0, 2, 4, 7, 10, 11, 13, 17, 26, 41, 44, 65, 68, 94], "class": [0, 1, 2, 3, 4, 9, 21, 22, 24, 29, 31, 34, 88], "automl": [0, 1, 2, 4, 7, 9, 94], "class_problem": [0, 1, 2, 3, 4, 7, 9, 10, 11, 12, 13, 26, 31, 39, 40, 47, 94], "binari": [0, 1, 2, 3, 4, 7, 9, 10, 11, 13, 24, 26, 29, 31, 39, 53, 94], "conf_train": [0, 2, 7, 10, 11, 12, 13, 39, 40], "fit": [0, 1, 2, 4, 5, 7, 9, 10, 11, 12, 13, 19, 20, 37, 39, 40, 43, 51, 52, 53, 59, 61, 63, 65, 66, 94], "df_train": [0, 1, 2, 4, 94], "target_col": [0, 1, 2, 4, 9, 10, 11, 12, 13, 43, 46, 51, 53, 54, 94], "target": [0, 1, 2, 4, 7, 9, 10, 11, 12, 13, 17, 26, 27, 39, 43, 44, 46, 47, 53, 65, 94], "y_prob": [0, 1, 2, 9, 10, 13, 29, 94], "y_class": [0, 1, 2, 9, 10, 13, 29, 94], "predict": [0, 1, 2, 4, 10, 11, 12, 13, 19, 20, 21, 22, 24, 25, 29, 31, 37, 39, 40, 44, 47, 59, 61, 63, 65, 66, 94], "df_val": [0, 1, 2, 9, 94], "thi": [0, 1, 2, 3, 4, 7, 9, 10, 11, 12, 13, 17, 21, 22, 25, 26, 27, 29, 33, 34, 39, 40, 41, 44, 46, 48, 50, 53, 54, 65, 68, 93, 94], "xgboost": [0, 2, 3, 7, 10, 11, 12, 13, 17, 31, 33, 36, 38, 40, 50, 93, 94], "": [0, 3, 11, 12, 17, 24, 25, 26, 27, 41, 68], "inbuilt": [0, 94], "routin": [0, 17], "which": [0, 7, 10, 11, 12, 13, 21, 22, 26, 41, 68], "allow": [0, 2, 3, 4, 9, 10, 13, 17, 94], "execut": [0, 2, 10, 11, 12, 13], "earli": [0, 17], "prune": [0, 4, 17], "promis": 0, "hyperparamet": [0, 1, 2, 4, 10, 13, 17, 33, 37, 39, 40, 59, 61, 63, 65, 66, 94], "set": [0, 9, 10, 11, 13, 17, 18, 19, 20, 21, 22, 41, 54, 68, 94], "wai": [0, 3, 7, 17, 54], "mani": [0, 3, 17, 26, 39, 40, 94], "than": [0, 3, 4, 17, 27, 94], "usual": [0, 7, 9, 17, 94], "There": [0, 94], "might": [0, 2, 3, 4, 17, 26], "situat": 0, "where": [0, 7, 9, 10, 11, 21, 22, 33], "preprocess": [0, 1, 3, 10, 11, 12, 13, 17, 36, 39, 40, 65, 93, 94], "step": [0, 2, 10, 13, 17, 39, 40, 94], "ha": [0, 1, 3, 4, 9, 10, 11, 12, 13, 17, 33, 34, 41, 52], "high": [0, 3, 10, 13, 21, 26, 27, 51, 53, 94], "risk": 0, "need": [0, 1, 2, 3, 7, 10, 13, 17, 26, 33, 44, 65, 94], "care": 0, "evalu": [0, 3, 7, 9, 10, 11, 12, 13, 17, 23, 36, 39, 40, 93, 94], "e": [0, 2, 4, 10, 13, 17, 26, 31, 33, 54], "oversampl": [0, 10, 13], "techniqu": [0, 10, 13, 51, 53], "For": [0, 2, 3, 4, 7, 9, 33, 44, 53, 65, 94], "scenario": 0, "offer": [0, 1, 2, 3, 5, 7, 9, 51, 53], "solut": [0, 4, 94], "well": [0, 1, 7], "precise_cv_tun": [0, 10, 13, 17], "true": [0, 2, 3, 9, 10, 13, 17, 22, 24, 25, 26, 27, 29, 33, 41], "better": [0, 9], "onli": [0, 2, 9, 10, 13, 17, 26, 27, 41, 46, 50, 94], "make": [0, 3, 7, 9, 33], "sens": 0, "we": [0, 2, 3, 4, 5, 7, 9, 44, 65, 68, 94], "have": [0, 2, 3, 7, 8, 9, 17, 26, 94], "an": [0, 2, 3, 4, 7, 10, 13, 17, 19, 20, 25, 26, 33, 39, 40, 41, 44, 51, 52, 65, 94], "riski": 0, "custom_preprocessor": [0, 2, 10, 11, 12, 13], "mycustompreprocess": [0, 2], "see": [0, 2, 4, 7, 17, 31, 41, 94], "section": 0, "detail": [0, 2, 11, 12, 17, 94], "custom_in_fold_preprocessor": [0, 10, 11, 12, 13, 39, 40], "happen": [0, 8], "dure": [0, 2, 9, 10, 11, 12, 13, 17, 22, 44, 47, 65], "each": [0, 3, 4, 7, 9, 10, 11, 12, 13, 17, 21, 22, 26, 31, 41, 43, 53], "fold": [0, 10, 11, 12, 13, 17], "The": [0, 1, 2, 3, 4, 7, 8, 9, 10, 11, 17, 24, 25, 26, 27, 31, 33, 34, 39, 40, 51, 53, 54, 68, 94], "take": [0, 2, 10, 13, 24, 34, 45, 48], "place": [0, 2, 10, 13], "within": [0, 4, 10, 13], "metric": [0, 2, 4, 7, 11, 12, 29, 33], "special": [0, 53], "here": [0, 2, 3, 4, 94], "instead": [0, 3, 7, 10, 13, 39, 40], "calcul": [0, 2, 3, 9, 17, 19, 20, 21, 22, 24, 25, 27, 29, 31, 39, 40, 53], "matthew": [0, 11], "correl": [0, 26, 27], "coeffici": 0, "revers": [0, 46], "appli": [0, 26, 39, 40], "increasingli": [0, 39, 40], "random": [0, 4, 10, 13, 17, 26, 68], "nois": [0, 39, 40], "eval": [0, 11, 12, 33, 39, 40], "dataset": [0, 3, 7, 11, 12, 26, 39, 40, 41, 52], "find": [0, 9, 41, 94], "much": [0, 3, 9, 17, 94], "doe": [0, 3, 26, 52, 94], "slower": 0, "bluecastcv": [0, 1, 4, 9, 11, 17, 33, 94], "support": [0, 5, 7, 94], "pleas": [0, 2, 4, 94], "note": [0, 2, 4, 94], "experiment": [0, 4, 10, 11, 12, 13, 36, 39, 40, 93], "featur": [0, 1, 4, 7, 8, 17, 18, 19, 20, 26, 27, 31, 46, 47, 48, 51, 53], "By": [0, 7], "optuna": [0, 2, 4, 17], "bayesian": 0, "optim": [0, 2], "howev": [0, 3, 4, 9], "method": [0, 2, 4, 7, 9, 12, 13, 15, 17, 18, 37, 41, 48, 51, 53, 59, 61, 63, 65, 66, 94], "give": [0, 94], "estim": [0, 2, 7, 25], "do": [0, 5, 9, 10, 13], "necessarli": 0, "ideal": 0, "spot": 0, "thu": [0, 3, 5, 7], "option": [0, 2, 3, 26, 41, 44, 65, 94], "gridsearch": [0, 7, 17], "refin": 0, "some": [0, 1, 2, 3, 94], "found": 0, "enable_grid_search_fine_tun": [0, 17], "fine": [0, 17], "tune": [0, 1, 2, 3, 4, 10, 13, 17, 37, 39, 40, 44, 59, 61, 63, 65, 66, 94], "differ": [0, 3, 7, 11, 12, 24, 48, 51, 53], "seed": [0, 2, 4], "autotun": [0, 2, 17, 39, 40], "1000": [0, 2, 17, 56], "fals": [0, 2, 11, 12, 17, 26, 27, 33, 41, 44, 47, 54, 65], "gridsearch_tuning_max_runtime_sec": [0, 17], "3600": [0, 17], "max": 0, "runtim": [0, 17], "sec": 0, "gridsearch_nb_parameters_per_grid": [0, 17], "increas": [0, 9, 39, 40], "mean": [0, 4, 7, 9, 11, 12, 13, 21, 25, 53], "x": [0, 8, 9, 19, 20, 26, 41, 51, 53, 94], "3": [0, 2, 5, 17, 26, 31], "trial": [0, 2, 4, 17], "atm": 0, "come": [0, 3, 39, 40], "tradeoff": 0, "longer": [0, 17], "further": [0, 1], "control": [0, 2, 10, 13], "two": [0, 2, 3, 7, 8, 9, 26, 41, 54], "decid": [0, 7, 17], "how": [0, 2, 3, 7, 9, 17, 26, 39, 40], "grid": [0, 17, 26], "shall": [0, 3, 11, 12, 17, 26, 94], "per": [0, 9, 17, 24, 25], "maximum": [0, 17], "time": [0, 3, 10, 13, 17, 39, 40, 54], "second": [0, 17], "run": [0, 2, 4, 5, 7, 10, 13, 17, 26, 94], "finish": [0, 17, 94], "latest": [0, 17], "nd": [0, 4, 17], "exce": [0, 17], "limit": [0, 17], "though": [0, 3, 9, 17, 94], "singl": 0, "possibl": [0, 2, 5, 9, 10, 13, 17, 54, 94], "multipl": [0, 4, 7, 11, 12, 17, 39, 40, 94], "one": [0, 3, 4, 9, 10, 13, 26, 33, 41], "call": [0, 2, 4, 7, 8, 10, 11, 12, 13, 17, 29, 33, 68], "fit_ev": [0, 2, 4, 7, 10, 11, 12, 13, 29, 94], "also": [0, 1, 2, 3, 4, 7, 9, 17, 39, 40, 46, 48, 53, 94], "provid": [0, 2, 3, 4, 9, 10, 11, 12, 13, 21, 22, 26, 27, 34, 39, 40, 41, 48, 54, 68, 94], "out": [0, 3, 11, 12, 50, 94], "configur": [0, 10, 13, 17, 94], "cast_cv": [0, 14, 36, 93], "xgboosttuneparamsconfig": [0, 2, 10, 11, 17, 39], "conf_xgboost": [0, 2, 10, 11, 12, 13, 39, 40], "xgboost_param_config": [0, 2], "right": [0, 2, 10, 13], "after": [0, 2, 3, 4, 7, 9, 10, 13, 17, 94], "test_train_split": [0, 2], "custom_last_mile_comput": [0, 2, 10, 11, 12, 13], "last": [0, 2, 44, 65], "befor": [0, 2, 10, 13, 26, 44, 65], "custom_feature_selector": [0, 2, 10, 11, 12, 13], "variant": 0, "regress": [0, 1, 2, 3, 7, 12, 13, 25, 26, 31, 40, 94], "avail": [0, 1, 2, 9, 53, 94], "cast_cv_regress": [0, 14, 36, 93], "bluecastcvregress": [0, 2, 9, 11, 12], "onehot": [0, 17, 43, 51], "orchestr": 0, "measur": [0, 10, 11, 12, 13, 24, 25, 41, 43], "column": [0, 2, 4, 8, 9, 10, 11, 12, 13, 22, 26, 27, 31, 39, 40, 41, 43, 45, 46, 48, 51, 52, 53, 94], "cardin": [0, 17, 43, 51, 53], "rout": 0, "when": [0, 2, 7, 10, 11, 12, 13, 17, 33, 41, 46], "less": [0, 7, 17, 43], "equal": [0, 17, 27, 43], "cardinality_threshold_for_onehot_encod": [0, 17], "chang": [0, 7, 10, 13, 17, 41, 94], "cat_encoding_via_ml_algorithm": [0, 2, 17], "expect": [0, 3, 9, 11, 12, 26, 33, 34, 39, 40, 41, 48, 68, 94], "If": [0, 10, 11, 13, 17, 26, 27, 37, 41, 43, 44, 48, 59, 61, 63, 65, 66, 94], "receiv": 0, "numer": [0, 2, 3, 8, 26, 27, 41, 46, 48], "becaus": [0, 2], "modul": 1, "contain": [1, 4, 9, 10, 13, 22, 26, 27, 33, 34, 39, 40, 41, 43, 44, 50, 54, 93, 94], "main": 1, "function": [1, 7, 9, 10, 11, 12, 13, 19, 20, 39, 40, 41, 46, 48, 94], "librari": [1, 9, 31, 51, 53, 94], "entri": [1, 2, 44, 65], "point": [1, 2, 9, 41, 44, 65], "It": [1, 4, 9, 10, 13, 24, 25, 34, 39, 40, 44, 46, 48, 51, 53, 65, 94], "alreadi": [1, 3, 19, 20, 46, 48, 51, 53], "includ": [1, 3, 7, 11, 12, 22, 26, 39, 40, 41, 94], "conveni": [1, 2, 3, 10, 13, 46, 48], "like": [1, 3, 4, 7, 24, 41, 94], "type": [1, 2, 10, 13, 17, 19, 20, 31, 34, 41, 48, 94], "detect": [1, 27, 48, 52, 94], "model": [1, 3, 4, 8, 10, 11, 12, 13, 17, 18, 19, 20, 22, 25, 26, 31, 33, 34, 37, 39, 40, 41, 44, 45, 59, 61, 63, 65, 66, 94], "version": [1, 5, 8, 26, 94], "0": [1, 2, 3, 4, 8, 9, 10, 11, 17, 19, 24, 27, 29, 41, 47, 50, 54, 92, 94], "95": [1, 94], "predict_proba": [1, 9, 10, 11, 19, 39, 94], "directli": [1, 94], "util": [1, 34], "save": [1, 34, 44, 65, 94], "load": [1, 17, 34, 39, 40, 44, 65, 94], "your": [1, 4, 94], "pipelin": [1, 3, 8, 10, 13, 17, 33, 41, 44, 46, 50, 65, 94], "general_util": [1, 36, 93], "save_to_product": [1, 34], "load_for_product": [1, 34], "tracker": [1, 4, 15, 18, 33], "kaggl": [1, 2], "work": [1, 2, 94], "bluecast_cv_pipelin": 1, "product": [1, 4, 10, 13, 41, 94], "experi": [1, 15, 17, 18, 33], "again": 1, "sinc": [1, 8], "80": [1, 7], "cast_regress": [1, 9, 14, 36, 93], "bluecastregress": [1, 2, 9, 11, 12, 13], "y_hat": [1, 9, 20, 21, 24, 25], "despit": [2, 94], "e2eml": 2, "easi": [2, 5, 94], "user": [2, 3, 7, 9, 10, 13, 17, 44, 46, 65, 94], "just": [2, 9], "exampl": 2, "search": [2, 10, 13, 17, 39, 40], "space": [2, 3, 10, 13, 17, 39, 40, 41], "steps_max": [2, 17], "100": [2, 9, 39, 40, 54], "max_leaves_max": [2, 17], "16": 2, "hyperparameter_tuning_round": [2, 17], "10": [2, 17, 26, 41], "autotune_model": [2, 4, 17], "want": [2, 3, 7], "normal": [2, 25, 39, 40], "could": [2, 4], "even": [2, 3, 4, 7, 9, 10, 13, 94], "overwrit": [2, 39, 40], "final": [2, 9, 17, 68], "param": [2, 7, 10, 11, 12, 13, 17, 21, 22, 24, 25, 26, 29, 31, 34, 39, 40, 41, 43, 44, 45, 65], "us": [2, 3, 5, 7, 9, 10, 11, 12, 13, 17, 22, 25, 26, 29, 31, 33, 39, 40, 41, 44, 47, 48, 53, 65, 68, 94], "xgboostfinalparamconfig": [2, 10, 11, 12, 13, 17, 39, 40], "done": [2, 9, 17, 33, 54], "abstract": [2, 15, 18, 37, 44, 65], "inherit": [2, 10, 13], "inject": [2, 10, 13], "attribut": [2, 7, 10, 13], "train_test_split": [2, 9, 36, 49, 93], "start": [2, 4], "ar": [2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 17, 26, 44, 45, 46, 48, 65, 68, 94], "present": [2, 3, 10, 11, 12, 13], "anymor": 2, "comput": [2, 3, 9, 24, 26, 41, 44, 65], "sub": [2, 11, 12], "sampl": [2, 7, 17, 31, 41], "custompreprocess": [2, 10, 11, 12, 13, 39, 40, 44, 47, 65], "def": [2, 4], "__init__": 2, "self": [2, 4], "trained_pattern": [2, 44, 65], "fit_transform": [2, 44, 47, 51, 65], "df": [2, 10, 11, 12, 13, 26, 31, 37, 39, 40, 43, 44, 45, 47, 48, 50, 52, 54, 59, 61, 63, 65, 66], "pd": [2, 4, 41], "datafram": [2, 4, 10, 11, 12, 13, 15, 18, 19, 20, 21, 22, 24, 26, 27, 31, 33, 37, 39, 40, 41, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 56, 58, 59, 61, 63, 65, 66, 73, 94], "seri": [2, 10, 11, 12, 13, 18, 19, 21, 22, 24, 25, 37, 39, 40, 41, 44, 46, 47, 51, 53, 59, 61, 63, 65, 66, 76, 82, 83], "tupl": [2, 10, 11, 12, 24, 31, 37, 39, 44, 47, 48, 58, 59, 61, 63, 65, 66, 76, 82, 83], "num_column": [2, 3, 48], "drop": 2, "beta": 2, "gamma": [2, 4], "delta": 2, "alpha": [2, 4, 9, 10, 11, 12, 13, 19, 20, 21, 22], "ej": 2, "axi": [2, 41], "cat_df": 2, "copi": [2, 94], "zscore": 2, "fit_al": 2, "transform_al": 2, "imp_mean": 2, "simpleimput": 2, "missing_valu": 2, "np": 2, "nan": [2, 50], "strategi": 2, "median": 2, "loc": [2, 3, 4], "transform": [2, 10, 13, 39, 40, 44, 45, 46, 47, 48, 51, 52, 53, 65], "imput": [2, 34], "merg": 2, "left_index": 2, "right_index": 2, "left": 2, "return": [2, 9, 10, 11, 12, 13, 24, 25, 26, 27, 31, 34, 37, 39, 40, 41, 45, 59, 61, 63, 65, 66, 68, 94], "none": [2, 4, 10, 11, 12, 13, 15, 17, 18, 26, 27, 29, 31, 33, 34, 37, 39, 40, 41, 43, 44, 45, 46, 47, 48, 54, 59, 61, 63, 65, 66], "predicton_mod": [2, 44, 47, 65], "bool": [2, 4, 11, 12, 15, 17, 26, 33, 41, 44, 47, 54, 65], "replac": [2, 50, 53, 68, 94], "inf": 2, "add": [2, 4, 9, 15, 20, 33, 39, 40, 45, 94], "mile": [2, 44, 65], "mycustomlastmilepreprocess": [2, 65], "custom_funct": [2, 65], "2": [2, 7, 9, 17, 41, 92], "custom_col": 2, "base": [2, 3, 4, 10, 11, 12, 13, 15, 17, 18, 19, 20, 31, 33, 37, 39, 40, 41, 44, 46, 47, 48, 51, 53, 54, 59, 61, 63, 65, 66, 94], "enforc": [2, 4, 15, 18, 37, 59, 61, 63, 65, 66], "implement": [2, 3, 4, 7, 10, 13, 15, 18, 26, 31, 33, 37, 45, 51, 53, 59, 61, 63, 65, 66], "head": 2, "isinst": 2, "targ": 2, "autom": [2, 3, 94], "On": [2, 10, 13, 47, 94], "disabl": 2, "rais": [2, 52], "warn": [2, 52, 94], "inform": [2, 4, 26, 33], "about": [2, 4], "via": [2, 3, 7, 9, 10, 11, 12, 13, 17, 34, 94], "enable_feature_select": [2, 4, 17], "follow": [2, 94], "show": [2, 3, 7, 8, 11, 12, 17, 26, 31, 94], "sklearn": [2, 4, 9, 26], "feature_select": [2, 10, 11, 12, 13, 36, 49, 93], "rfecv": 2, "make_scor": 2, "matthews_corrcoef": 2, "model_select": [2, 9], "stratifiedkfold": 2, "rfecvselector": [2, 10, 11, 12, 13, 47], "random_st": [2, 3, 4, 9, 26, 47, 54, 56], "int": [2, 4, 10, 13, 15, 17, 19, 26, 27, 29, 31, 33, 39, 40, 41, 43, 45, 46, 47, 48, 50, 51, 53, 54, 56], "super": 2, "selected_featur": 2, "selection_strategi": [2, 47], "xgb": [2, 68], "xgbclassifi": 2, "cv": [2, 4, 7, 10, 13, 17, 61, 65], "shuffl": [2, 17], "min_features_to_select": [2, 17, 47], "score": [2, 3, 10, 11, 12, 19, 20, 24, 26, 33, 39, 41], "n_job": 2, "support_": 2, "instanc": [2, 4, 7, 9, 10, 11, 12, 13, 17, 18, 19, 20, 31, 33, 34], "conf_feature_select": 2, "custom_feat_sel": 2, "data": [2, 3, 4, 7, 10, 11, 12, 13, 17, 18, 19, 20, 25, 26, 27, 31, 37, 39, 40, 41, 48, 54, 59, 61, 63, 65, 66, 68, 86, 94], "x_train": [2, 9, 37, 39, 40, 44, 59, 61, 63, 65, 66], "feature1": [2, 8], "rang": [2, 24], "feature2": 2, "y_train": [2, 9, 37, 39, 40, 44, 59, 61, 63, 65, 66], "x_test": [2, 7, 9, 37, 39, 40, 44, 59, 61, 63, 65, 66], "y_trai": 2, "predicted_proba": 2, "predicted_class": 2, "enjoi": [2, 9], "below": 2, "properti": 2, "defin": [2, 7, 17, 24, 26, 41, 47, 68], "baseclassmlmodel": [2, 37, 39, 59, 61, 63], "ml_model": [2, 7, 10, 11, 12, 13, 36, 59, 61, 63, 65, 66, 93], "base_class": [2, 4, 16, 19, 20, 23, 33, 36, 38, 39, 40, 59, 61, 63, 65, 66, 93], "predictedclass": [2, 37, 59, 61, 63], "lint": 2, "check": [2, 3, 4, 8, 9, 11, 12, 17, 21, 22, 26, 27, 39, 40, 41, 52, 94], "predictedproba": [2, 37, 59, 61, 63], "custommodel": [2, 59, 65, 66], "y_test": [2, 37, 39, 40, 44, 59, 61, 63, 65, 66], "eval_dataset": 2, "pool": 2, "cat_featur": 2, "dmar": 2, "ld_indl": 2, "rf_cesar": 2, "sex": 2, "05": [2, 8, 9, 10, 11, 19, 41], "quantile_level": 2, "quantile_str": 2, "str": [2, 4, 10, 11, 12, 13, 15, 17, 26, 27, 29, 33, 34, 39, 40, 41, 43, 45, 46, 48, 51, 53, 54], "part": [2, 3, 7, 8, 26, 27, 29, 45, 50], "taken": [2, 10, 11, 12, 13], "http": [2, 31], "www": 2, "com": [2, 31], "code": [2, 3], "syerramilli": 2, "catboost": [2, 94], "multi": [2, 10, 13, 17], "quantil": [2, 20, 41, 94], "n_estim": 2, "suggest_int": 2, "50": [2, 26], "2000": 2, "log": [2, 17], "min_data_in_leaf": 2, "learning_r": 2, "suggest_float": 2, "1e": 2, "depth": 2, "l2_leaf_reg": 2, "1e6": 2, "colsample_bylevel": [2, 4], "subsampl": [2, 4], "catboostregressor": 2, "loss_funct": 2, "f": [2, 9, 22, 94], "multiquantil": 2, "thread_count": 2, "4": [2, 4, 26], "bootstrap_typ": 2, "bernoulli": 2, "sampling_frequ": 2, "pertre": 2, "verbos": 2, "get": [2, 3, 4, 31], "pred": [2, 19, 20], "perfom": 2, "mwi": 2, "coverag": [2, 94], "mwis_metr": 2, "9": [2, 3, 5, 27], "except": 2, "trialprun": 2, "sampler": 2, "tpesampl": 2, "multivari": 2, "studi": [2, 3], "create_studi": 2, "direct": [2, 26], "minim": 2, "study_nam": 2, "n_trial": 2, "500": 2, "timeout": 2, "60": 2, "gc_after_tri": 2, "show_progress_bar": 2, "best_paramet": 2, "best_trial": 2, "eval_set": 2, "use_best_model": 2, "early_stopping_round": [2, 4, 17], "20": [2, 29, 56, 94], "plot": [2, 17, 26, 29, 31, 41], "classifi": 2, "global_random_st": [2, 4, 17], "calculate_shap_valu": [2, 17], "train_siz": [2, 17, 54], "8": [2, 5, 17, 26, 54], "own": [2, 17, 33], "cat": 2, "encod": [2, 17, 43, 46, 51, 53, 94], "catboost_model": 2, "incompat": 2, "shape": [2, 21, 22], "append": 2, "requir": [2, 3, 4, 7, 37, 59, 61, 63, 65, 66, 94], "pre": [2, 94], "shap": [2, 4, 17, 31], "valu": [2, 3, 8, 9, 10, 11, 12, 13, 17, 18, 19, 20, 22, 24, 25, 26, 27, 31, 46, 50, 53, 94], "tree": [2, 3, 45], "other": [2, 27], "architectur": [2, 7, 9, 94], "instanti": [2, 4, 10, 13], "new": [2, 5, 7, 10, 13, 17, 41, 53, 94], "updat": [2, 94], "abov": [2, 26], "argument": [2, 26, 41], "ad": [2, 4, 94], "definit": 2, "first": [3, 7], "overview": 3, "write": 3, "line": [3, 41], "handi": [3, 4], "focu": 3, "rather": [3, 94], "visual": [3, 7, 41, 94], "still": [3, 94], "form": 3, "csv": 3, "object": [3, 19, 20, 34, 94], "due": 3, "excel": [3, 94], "file": [3, 34, 94], "With": [3, 94], "grow": 3, "size": [3, 9, 17, 26], "lot": [3, 94], "them": [3, 7, 11, 12, 26, 45, 46, 48], "appropri": [3, 43], "featuretypedetector": [3, 48], "task": 3, "same": [3, 4, 9, 39, 40, 52], "detector": 3, "ml": [3, 7, 10, 13, 17, 31, 33, 34, 37, 59, 61, 63, 65, 66, 94], "result": [3, 4, 15, 24, 25, 33], "oper": 3, "outsid": 3, "eda": [3, 36, 93, 94], "analys": [3, 28, 36, 93], "bi_variate_plot": [3, 26], "univariate_plot": [3, 26], "plot_count_pair": [3, 26], "correlation_heatmap": [3, 26], "correlation_to_target": [3, 26], "plot_ecdf": [3, 26], "plot_pca": [3, 26], "plot_pca_cumulative_vari": [3, 26], "plot_theil_u_heatmap": [3, 26], "plot_tsn": [3, 26], "check_unique_valu": [3, 26], "plot_null_percentag": [3, 26], "mutual_info_to_target": [3, 26], "plot_pie_chart": [3, 26], "feature_typ": [3, 36, 49, 93], "automat": [3, 4, 10, 13, 33, 94], "feat_type_detector": 3, "train_data": 3, "fit_transform_feature_typ": [3, 48], "veri": [3, 94], "share": 3, "uniqu": [3, 26], "many_unique_col": 3, "cat_column": [3, 10, 13, 43, 48, 51, 53], "To": [3, 12, 13, 24, 26, 94], "distribut": [3, 29, 39, 40, 41], "categori": [3, 8, 26, 46, 51, 53], "viabl": 3, "our": [3, 94], "been": [3, 9, 10, 11, 12, 13, 33, 94], "design": [3, 94], "appeal": 3, "insight": [3, 7], "alik": 3, "percentag": [3, 9, 22], "all": [3, 4, 5, 7, 9, 11, 12, 17, 21, 26, 37, 59, 61, 63, 65, 66, 94], "synthetic_train_test_data": [3, 58, 59, 61, 65, 66], "categorical_feature_1": 3, "handl": [3, 50], "miss": [3, 17, 44, 47, 50, 52, 65, 94], "box": [3, 50, 94], "relev": [3, 46], "observ": 3, "bar": 3, "loop": [3, 7, 45], "through": [3, 7, 45, 46], "histogram": [3, 29], "boxplot": 3, "ec1": 3, "In": [3, 4, 9, 17, 33, 46], "case": [3, 34, 41, 46, 53, 68], "mislead": 3, "cannot": 3, "outlier": 3, "altern": [3, 39, 40], "understand": [3, 7, 94], "either": [3, 10, 43], "combin": [3, 26], "plot_all_at_onc": [3, 26], "regard": 3, "discret": 3, "bin": [3, 29], "contin": 3, "bi": 3, "variat": 3, "intend": 3, "compar": [3, 4, 26, 41], "between": [3, 7, 21, 24, 25, 26, 27, 41], "repres": [3, 17, 26, 31, 41], "drift": [3, 41], "occur": [3, 41], "cat_col": [3, 26], "select": [3, 4, 17, 47], "explain": [3, 4, 31, 94], "variabl": [3, 4, 9, 26, 27, 53], "captur": [3, 4], "linear": [3, 41], "signal": 3, "pearson": 3, "r": 3, "indic": [3, 7, 10, 11, 12, 13, 17, 21, 22, 26, 31, 41, 52], "relationship": 3, "reveal": [3, 7], "multicollinear": 3, "theil": [3, 26, 27], "u": [3, 26, 27], "build": [3, 7, 94], "assoc": 3, "theil_matrix": 3, "nonlinear": 3, "classif": [3, 10, 13, 26, 29, 39, 40, 53], "multiclass": [3, 7, 10, 11, 26, 31, 39, 53], "format": [3, 9, 22, 26, 48], "problem": [3, 10, 13, 29, 31, 94], "ani": [3, 4, 9, 10, 11, 12, 13, 15, 17, 19, 20, 25, 26, 29, 31, 33, 34, 37, 39, 40, 44, 65, 92], "extra_param": 3, "30": 3, "look": 3, "condens": 3, "dimension": [3, 41, 53], "separ": [3, 8, 26, 94], "exactli": 3, "sometim": 3, "know": [3, 7], "compont": 3, "would": [3, 7, 17], "certain": [3, 7, 9, 10, 11, 12, 13], "non": [3, 4], "perplex": [3, 26], "Be": 3, "awar": 3, "slow": 3, "depend": [3, 5, 7, 17, 26, 31, 43, 94], "big": [3, 5], "complex": 3, "sneak": 3, "data_leakage_check": [3, 28, 36, 93], "detect_categorical_leakag": [3, 27], "detect_leakage_via_correl": [3, 27], "threshold": [3, 8, 17, 26, 27, 41, 43], "environ": [4, 5, 26, 94], "store": [4, 7, 8, 10, 11, 17, 52], "enhanc": 4, "No": 4, "setup": 4, "necessari": [4, 17], "df_eval": [4, 10, 13, 94], "y_eval": [4, 94], "access": 4, "experiment_track": [4, 10, 11, 12, 13, 39, 40, 78], "panda": [4, 10, 11, 12, 13, 15, 18, 19, 20, 21, 22, 24, 25, 26, 27, 31, 33, 37, 39, 40, 41, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 56, 58, 59, 61, 63, 65, 66, 73, 76, 82, 83], "tracker_df": 4, "retrieve_results_as_df": [4, 15, 18, 33], "now": 4, "you": [4, 94], "feed": 4, "back": [4, 46], "try": [4, 34, 48], "eval_scor": [4, 15, 33], "mayb": 4, "uncov": 4, "hidden": 4, "pattern": 4, "number": [4, 7, 9, 17, 21, 26, 29, 31, 39, 40], "probabl": [4, 10, 11, 12, 13, 21, 22, 24, 29, 37, 59, 61, 63], "lower": [4, 5, 9, 20, 41], "skip": [4, 44, 65], "whenev": 4, "trigger": [4, 33], "manual": 4, "collect": [4, 11, 12], "anoth": [4, 94], "sever": 4, "deriv": 4, "ensembl": [4, 9, 94], "randomforestregressor": 4, "col": 4, "shuffle_during_train": [4, 17], "train_split_stratifi": [4, 17], "use_full_data_for_final_model": [4, 17], "eta": 4, "max_depth": 4, "lambda": 4, "max_leav": 4, "colsample_bytre": 4, "regr": 4, "score_categori": [4, 15, 33], "oof_scor": [4, 15, 33], "experiment_feats_df": 4, "experiment_feats_target": 4, "fillna": 4, "99": 4, "treeexplain": 4, "shap_valu": [4, 7, 30, 36, 93], "summary_plot": 4, "seem": 4, "had": 4, "signific": [4, 7], "impact": [4, 7], "send": 4, "server": 4, "cnfig": 4, "baseclassexperimenttrack": [4, 15, 33], "customexperimenttrack": 4, "add_result": [4, 15, 18, 33], "abstractmethod": 4, "experiment_id": [4, 15, 33], "liter": [4, 10, 11, 12, 13, 15, 26, 31, 33, 39, 40], "simple_train_test_scor": [4, 15, 33], "cv_score": [4, 15, 33], "model_paramet": [4, 15, 33], "dict": [4, 10, 13, 15, 17, 21, 22, 29, 33, 34, 39, 40, 41, 46], "union": 4, "float": [4, 10, 11, 12, 13, 15, 17, 19, 20, 21, 22, 25, 26, 27, 33, 39, 40, 41, 43, 45, 46, 48, 50, 51, 53, 54], "metric_us": [4, 15, 33], "metric_higher_is_bett": [4, 15, 33], "experimenttrack": [4, 10, 11, 12, 13, 15, 17, 33, 39, 40], "retriev": [4, 15], "aim": [5, 7], "keep": 5, "slim": 5, "portfolio": 5, "fast": [5, 94], "most": [5, 7, 24, 31], "pypi": 5, "pip": 5, "fresh": 5, "python": [5, 17, 92], "higher": [5, 9, 26, 41], "recommend": [5, 10, 13, 41, 51], "conscious": 5, "prevent": 5, "usag": [5, 9], "outdat": 5, "issu": [5, 26], "connect": 5, "clone": 5, "repositori": 5, "conda": 5, "poetri": [5, 94], "manag": 5, "As": 7, "scientist": [7, 94], "real": [7, 94], "world": [7, 94], "applic": [7, 17], "variou": [7, 41, 94], "around": [7, 9], "itself": 7, "progress": 7, "loss": [7, 24, 39, 40], "shown": [7, 26], "round": [7, 17], "suffici": 7, "futur": 7, "more": [7, 17, 44, 65, 94], "addition": 7, "visualis": 7, "extra": [7, 52], "layer": 7, "crucial": 7, "busi": 7, "therefor": 7, "unseen": [7, 10, 11, 12, 13, 18, 19, 20, 37, 39, 40, 59, 61, 63, 65, 66, 94], "At": [7, 13], "end": [7, 17, 46, 94], "confus": 7, "matrix": 7, "list": [7, 9, 10, 12, 13, 17, 19, 20, 21, 22, 26, 27, 31, 39, 40, 43, 45, 48, 51, 53], "standard": [7, 25, 26], "deviat": [7, 25], "those": 7, "process": [7, 22, 44, 45, 47, 65], "help": [7, 25, 94], "behav": 7, "particularli": 7, "global": [7, 17], "furthermor": [7, 9], "row": [7, 10, 11, 21, 22, 24, 25, 26], "level": [7, 10, 11, 12, 13, 21, 22], "waterfal": [7, 31], "cla": 7, "shap_waterfall_indic": [7, 17], "third": 7, "interact": 7, "top": [7, 47, 94], "show_dependence_plots_of_top_n_featur": [7, 17, 31], "toolkit": [7, 94], "extern": 7, "shap_dependence_plot": [7, 31], "shap_explan": [7, 31], "shap_waterfall_plot": [7, 31], "35": 7, "999": 7, "exact": 7, "illustr": 7, "regardless": 7, "path": [7, 34, 94], "wrapper": [7, 9, 11, 12, 39, 40, 46, 48], "matplotlib": [7, 26, 29, 41], "pyplot": 7, "plt": 7, "plot_tre": 7, "fig": 7, "gcf": 7, "set_size_inch": 7, "150": 7, "characterist": 7, "pai": 7, "attent": [7, 9], "thei": [7, 26, 45, 46], "onc": 7, "insid": [7, 10, 13, 17], "bluecast_model": 7, "90": 8, "categor": [8, 10, 13, 17, 26, 27, 41, 43, 46, 48, 51, 53, 94], "raw": [8, 26], "anonym": 8, "data_monitor": [8, 36, 42, 93], "datadrift": [8, 41], "data_drift_check": 8, "statist": 8, "kolmogorov_smirnov_test": [8, 41], "new_data": [8, 41], "flag": [8, 41], "print": 8, "kolmogorov_smirnov_flag": 8, "population_stability_index": [8, 41], "population_stability_index_flag": 8, "psi": [8, 41], "population_stability_index_valu": 8, "qqplot": 8, "qqplot_two_sampl": [8, 41], "x_label": [8, 41], "y_label": [8, 41], "y": [8, 9, 26, 39, 41, 51, 53], "over": [9, 94], "past": [9, 94], "year": 9, "gain": 9, "everi": [9, 20], "cost": 9, "bit": 9, "addit": [9, 11, 12, 17, 26, 45], "agnost": 9, "leav": 9, "up": [9, 10, 13], "off": [9, 10, 13], "calibr": [9, 10, 11, 12, 13, 18, 19, 20], "x_calibr": [9, 10, 11, 12, 13, 18, 19, 20], "y_calibr": [9, 10, 11, 12, 13, 18, 19, 20], "test_siz": 9, "33": [9, 17], "42": [9, 26], "given": [9, 18, 19, 20, 50], "confid": [9, 10, 11, 12, 13, 21, 22], "interv": [9, 12, 13, 21, 22], "pred_set": 9, "predict_set": [9, 10, 11, 19], "p": [9, 10, 11], "being": [9, 10, 11, 26, 94], "correct": [9, 10, 11, 12, 13], "pred_interv": 9, "predict_p_valu": [9, 10, 11], "valid": [9, 10, 13, 17, 22, 33, 47, 94], "qualiti": 9, "conformal_predict": [9, 36, 93], "effectiveness_nonconformity_measur": [9, 23, 36, 93], "one_c": [9, 21], "avg_c": [9, 21], "label": [9, 10, 11, 18, 19, 20, 21, 22, 24, 26, 29, 41, 46, 68], "credibl": 9, "ask": 9, "question": 9, "percent": 9, "prediction_set_coverag": [9, 22], "y_val": 9, "predict_interv": [9, 12, 13, 19, 20], "01": 9, "band": [9, 12, 13, 20, 21, 22], "prediction_interval_coverag": [9, 22], "broad": 9, "prediction_interval_span": [9, 21], "_low": [9, 22], "_high": [9, 22], "both": [9, 41], "standalon": 9, "without": [9, 10, 11, 12, 13], "long": [9, 33], "input": [9, 11, 12], "make_classif": 9, "n_sampl": [9, 21, 22], "n_featur": 9, "n_class": 9, "logist": 9, "logisticregress": 9, "conformalpredictionwrapp": [9, 19], "make_regress": 9, "linearregress": 9, "conformalpredictionregressionwrapp": [9, 20], "fulli": [10, 13], "rel": [10, 13], "light": [10, 13], "weight": [10, 13, 39, 40], "speed": [10, 13], "prototyp": [10, 13], "deal": [10, 13, 53], "switch": [10, 13, 17], "strengthen": [10, 13], "cross": [10, 13, 17, 33, 47], "date_column": [10, 13, 45, 48], "time_split_column": [10, 13], "xgboostmodel": [10, 11, 12, 39], "conf_params_xgboost": [10, 11, 12, 13, 39, 40], "track": [10, 11, 12, 13, 32, 36, 39, 40, 93], "sourc": [10, 11, 12, 13, 15, 17, 26, 27, 29, 31, 33, 34, 37, 39, 40, 41, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 56, 58, 59, 61, 63, 65, 66, 67, 68, 72, 73, 74, 75, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 94], "string": [10, 11, 12, 13, 26, 34, 41], "target_column": [10, 13, 27], "name": [10, 11, 12, 13, 17, 26, 27, 33, 34, 43, 48], "infer": [10, 13, 44, 47, 48, 65], "date": [10, 13, 45], "order": [10, 13, 26, 54], "api": [10, 13, 41, 94], "baseclass": [10, 13], "base_model": [10, 13], "basemodel": [10, 13, 17], "eeecut": [10, 13], "themselv": [10, 13], "proprocess": [10, 13], "chanc": [10, 13], "overfit": [10, 13, 17], "otherwis": [10, 13, 26, 43, 48], "spit": [10, 13], "initi": [10, 13, 34], "initial_check": [10, 13], "full": [10, 13, 17, 34, 94], "target_ev": [10, 13], "holdout": [10, 13], "explor": [10, 13], "should": [10, 13, 26, 37, 39, 40, 59, 61, 63, 65, 66, 94], "transform_new_data": [10, 13], "accord": [10, 13, 21, 22], "numpi": [10, 11, 13, 18, 19, 20, 21, 22, 24, 25, 29, 31, 37, 39, 40, 41, 65, 66, 68, 76, 82, 83], "ndarrai": [10, 11, 13, 18, 19, 20, 21, 22, 24, 25, 29, 31, 37, 39, 40, 65, 66, 76, 82, 83], "kwarg": [10, 11, 12, 13, 41], "nonconform": [10, 11, 12, 13, 19, 20, 24, 25], "seen": [10, 11, 12, 13], "hold": [10, 11, 12, 13, 26, 31, 41], "hat": [10, 11, 12, 13], "p_valu": [10, 11], "arrai": [10, 11, 29, 37, 41, 65, 66, 68], "were": [10, 11], "map": [10, 11, 43, 46, 48], "index": [10, 11, 17, 31, 41, 94], "target_label_encod": [10, 11], "target_label_map": [10, 11], "conform": [10, 11, 12, 13, 94], "guarante": [10, 11, 12, 13], "desir": [10, 11, 12, 13], "prediction_set": [10, 11, 22], "nest": [10, 11], "stratifi": [11, 12, 17, 54], "intstanc": [11, 12], "document": [11, 12, 17, 41, 93], "A": [11, 12, 13, 19, 20, 26, 27, 46, 94], "splitter": [11, 12], "prepare_data": [11, 12], "show_oof_scor": [11, 12], "oof": [11, 12], "averag": [11, 12, 21], "std": [11, 12], "oof_mean": [11, 12], "oof_std": [11, 12], "return_sub_models_pr": [11, 12], "blend": 11, "xgboosttuneparamsregressionconfig": [12, 13, 17, 40], "rmse": [12, 17], "vi": [12, 13], "sort": [12, 13], "alpha_xx_low": [12, 13], "alpha_xx_high": [12, 13], "obtain": [12, 13], "xgboost_regress": [13, 36, 38, 93], "xgboostmodelregress": [13, 40], "moment": 13, "abc": [15, 18, 37, 44], "common": 17, "pydant": 17, "dataclass": 17, "arbitrary_types_allow": 17, "state": [17, 26], "reproduc": 17, "increase_random_state_in_bluecast_cv_bi": 17, "whether": 17, "Not": 17, "hyperparameter_tuning_max_runtime_sec": 17, "enabl": [17, 33], "caus": 17, "until": 17, "stop": 17, "greater": [17, 27], "recurs": [17, 47], "compat": 17, "499": 17, "store_shap_values_in_inst": 17, "minimum": 17, "rest": 17, "Will": [17, 52], "ignor": 17, "algorithm": [17, 94], "readm": [17, 94], "show_detailed_tuning_log": 17, "grain": 17, "previou": 17, "experiment_nam": 17, "200": 17, "optuna_sampler_n_startup_tri": 17, "max_depth_min": 17, "max_depth_max": 17, "6": 17, "alpha_min": 17, "alpha_max": 17, "lambda_min": 17, "lambda_max": 17, "gamma_min": 17, "gamma_max": 17, "subsample_min": 17, "subsample_max": 17, "max_leaves_min": 17, "sub_sample_min": 17, "sub_sample_max": 17, "col_sample_by_tree_min": 17, "col_sample_by_tree_max": 17, "col_sample_by_level_min": 17, "col_sample_by_level_max": 17, "eta_min": 17, "001": 17, "eta_max": 17, "steps_min": 17, "verbosity_during_hyperparameter_tun": 17, "verbosity_during_final_model_train": 17, "xgboost_object": 17, "softprob": 17, "xgboost_eval_metr": 17, "mlogloss": 17, "booster": [17, 39, 40], "gbtree": 17, "reg": 17, "squarederror": 17, "hyper": 17, "sample_weight": 17, "classification_threshold": 17, "conformalpredictionwrapperbaseclass": [18, 19, 20], "must": [18, 19, 20, 22, 26, 27, 44, 65], "nonconformity_measure_scor": [19, 20], "callabl": [19, 20], "hinge_loss": [19, 24], "arg": [19, 20], "absolute_error": [20, 25], "_calculate_interv": 20, "upper": 20, "convert_expected_effectiveness_nonconformity_input_typ": 21, "proport": 21, "singleton": 21, "among": 21, "prediction_interv": [21, 22], "span": 21, "width": 21, "distanc": [21, 26], "low": 21, "y_true": [22, 24, 25, 29, 39, 40], "percentyg": 22, "cover": [22, 94], "ground": 22, "truth": 22, "conformal_prediction_regress": [23, 36, 93], "nonconformity_measur": [23, 36, 93], "nonconformity_measures_regress": [23, 36, 93], "convert_to_numpi": 24, "hing": 24, "subtract": 24, "margin_nonconformity_measur": 24, "margin": 24, "incorrect": 24, "brier_scor": 24, "brier": 24, "squar": 24, "actual": [24, 25, 33, 41], "perfect": 24, "accuraci": 24, "complet": 24, "inaccuraci": 24, "absolut": [25, 27, 34], "error": [25, 52], "normalized_error": 25, "scale": [25, 26], "divid": 25, "mae": 25, "residu": 25, "account": 25, "heteroscedast": 25, "explod": 26, "color": 26, "pie": 26, "chart": [26, 94], "explos": 26, "nterest": 26, "plott": 26, "segment": 26, "hexadecim": 26, "represent": [26, 46], "rgb": 26, "df_1": 26, "df_2": 26, "df_alias": 26, "palett": 26, "count": 26, "chosen": 26, "hue": 26, "read": [26, 94], "sn": 26, "countplot": 26, "appear": 26, "univari": 26, "num_cols_grid": 26, "bivari": 26, "specifi": [26, 41], "half": 26, "heatmap": 26, "relat": 26, "scale_data": 26, "pca": 26, "perform": [26, 94], "n_compon": 26, "cumul": [26, 41], "varianc": 26, "princip": 26, "compon": 26, "total": [26, 41], "t": [26, 45, 94], "sne": 26, "conditional_entropi": 26, "theil_u": 26, "amount": 26, "almost": [26, 31], "against": [26, 41], "mut_param": 26, "mutual": 26, "dictionari": [26, 33, 41, 44, 65], "mutual_info_classif": 26, "empir": 26, "densiti": 26, "older": 26, "ecdf": 26, "leakag": 27, "consid": [27, 39, 40, 41], "potenti": [27, 94], "respect": 27, "plot_lift_chart": 29, "num_bin": 29, "plot_roc_auc": 29, "predicted_prob": 29, "titl": 29, "roc": [29, 94], "curv": [29, 94], "auc": [29, 94], "area": 29, "under": [29, 31, 41], "posit": 29, "plot_probability_distribut": 29, "balanced_log_loss": 29, "y_pred": 29, "eval_classifi": 29, "eval_regressor": 29, "eval_metr": [30, 36, 93], "flexibl": 31, "explan": 31, "medium": 31, "rapid": 31, "ai": 31, "gpu": [31, 94], "acceler": 31, "587fad6822": 31, "get_most_important_features_by_shap_valu": 31, "col_nam": 31, "feature_importance_v": 31, "ueer": 33, "inspir": 33, "individu": [33, 48], "sequenti": 33, "id": 33, "sure": 33, "increment": 33, "chose": 33, "learn": 33, "rate": 33, "convert": [33, 46], "xgboostconfig": 33, "get_best_scor": [33, 39, 40], "target_metr": 33, "check_gpu_support": [34, 68], "logger": 34, "messag": 34, "class_inst": 34, "file_path": 34, "file_nam": 34, "automl_inst": 34, "file_typ": 34, "dat": 34, "pretrain": 34, "dill": 34, "whole": 34, "export": [34, 94], "auto": [34, 93, 94], "fallback": 34, "logic": 34, "fail": 34, "monitor": [36, 93, 94], "category_encoder_orchestr": [36, 49, 93], "datetime_featur": [36, 49, 93], "encode_target_label": [36, 49, 93], "nulls_and_inf": [36, 49, 93], "onehot_encod": [36, 49, 93], "schema_check": [36, 49, 93], "target_encod": [36, 49, 93], "make_data": [36, 55, 93], "create_data": [36, 55, 57, 93], "test_analys": [36, 55, 93], "test_cast": [36, 55, 93], "test_cast_binary_conformal_predict": [36, 55, 93], "test_cast_cv": [36, 55, 93], "test_cast_cv_binary_conformal_predict": [36, 55, 93], "test_cast_cv_multiclass": [36, 55, 93], "test_cast_cv_multiclass_conformal_predict": [36, 55, 93], "test_cast_cv_regress": [36, 55, 93], "test_cast_regress": [36, 55, 93], "test_category_encoder_orchestr": [36, 55, 93], "test_check_gpu_support": [36, 55, 93], "test_conformal_predict": [36, 55, 93], "test_conformal_prediction_evalu": [36, 55, 93], "test_conformal_prediction_regress": [36, 55, 93], "test_custom_processing_base_class": [36, 55, 93], "test_data_leakage_check": [36, 55, 93], "test_data_monitor": [36, 55, 93], "test_datetime_featur": [36, 55, 93], "test_effectiveness_nonconformity_measur": [36, 55, 93], "test_encode_target_label": [36, 55, 93], "test_experiment_track": [36, 55, 93], "test_feature_type_detector": [36, 55, 93], "test_fine_tun": [36, 55, 93], "test_load_for_product": [36, 55, 93], "test_nonconformity_measur": [36, 55, 93], "test_nonconformity_measures_regress": [36, 55, 93], "test_nulls_and_inf": [36, 55, 93], "test_onehot_encod": [36, 55, 93], "test_save_to_product": [36, 55, 93], "test_schema_check": [36, 55, 93], "test_shap_explan": [36, 55, 93], "test_target_encoding_binari": [36, 55, 93], "test_target_encoding_multiclass": [36, 55, 93], "test_train_test_split": [36, 55, 93], "baseclassmlregressionmodel": [37, 40, 65, 66], "imbalanc": [39, 40], "mai": [39, 40], "deepend": [39, 40], "calculate_class_weight": 39, "check_load_conf": [39, 40], "create_d_matric": [39, 40], "train_single_fold_model": [39, 40], "d_train": [39, 40], "d_test": [39, 40], "pruning_callback": [39, 40], "increasing_noise_evalu": [39, 40], "eval_df": [39, 40], "iter": [39, 40, 46], "power": [39, 40, 53], "yeo": [39, 40], "johnson": [39, 40], "constant_loss_degregation_factor": [39, 40], "decreas": [39, 40], "_fine_tune_precis": [39, 40], "tuned_param": [39, 40], "random_se": [39, 40], "fine_tun": [39, 40], "meant": 41, "suitabl": [41, 53], "batch": 41, "onlin": 41, "k": 41, "oth": 41, "nonparametr": 41, "fall": 41, "is_numeric_dtyp": 41, "origin": [41, 46], "kolmogorov": 41, "smirnov": 41, "drift_flag": 41, "_calculate_psi": 41, "bucket": 41, "popul": 41, "stabil": 41, "interpret": 41, "shift": 41, "slight": 41, "larg": 41, "interpol": 41, "nearest": 41, "ax": 41, "rug": 41, "rug_length": 41, "rug_kwarg": 41, "draw": 41, "versu": 41, "current": 41, "n": 41, "evenli": 41, "min": 41, "len": 41, "midpoint": 41, "horizont": 41, "vertic": 41, "drawn": 41, "length": [41, 52], "fraction": 41, "keyword": 41, "axvlin": 41, "axhlin": 41, "scatter": 41, "q": 41, "categoryencoderorchestr": 43, "assign": 43, "extend": [44, 65], "prediction_mod": [44, 65], "anyth": [44, 65], "placehold": [44, 65], "mode": [44, 47, 65], "extract": 45, "datetim": [45, 48, 94], "cyclic": 45, "aren": 45, "good": [45, 94], "match": [45, 52], "date_convert": 45, "date_part": 45, "month": 45, "dai": 45, "dayofweek": 45, "hour": 45, "modifi": 45, "targetlabelencod": 46, "translat": 46, "fit_label_encod": 46, "label_encoder_transform": 46, "fit_transform_target_label": 46, "transform_target_label": 46, "label_encoder_reverse_transform": 46, "featureselectionconfig": 47, "elimin": 47, "specif": 48, "accordingli": 48, "identify_num_column": 48, "identifi": 48, "exist": 48, "identify_bool_column": 48, "boolean": 48, "identify_date_time_column": 48, "no_bool_col": 48, "yyyi": 48, "mm": 48, "dd": 48, "cast_rest_columns_to_object": 48, "bool_col": 48, "treat": 48, "remain": 48, "tri": 48, "success": 48, "assum": 48, "orchest": 48, "transform_feature_typ": 48, "ignore_col": 48, "null": 50, "infinit": 50, "fill_infinite_valu": 50, "fill_with": 50, "fill_nul": 50, "unsupervis": 51, "category_encod": [51, 53], "varieti": [51, 53], "onehotencod": 51, "onehotcategoryencod": 51, "schema": [52, 94], "schemadetector": 52, "supervis": 53, "reduc": 53, "targetencod": 53, "binaryclasstargetencod": 53, "context": 53, "fit_target_encode_binary_class": 53, "transform_target_encode_binary_class": 53, "multiclasstargetencod": 53, "fit_target_encode_multiclass": 53, "transform_target_encode_multiclass": 53, "randomli": 54, "train_test_split_cross": 54, "stratif": 54, "train_test_split_tim": 54, "split_by_col": 54, "create_synthetic_datafram": 56, "num_sampl": 56, "create_synthetic_multiclass_datafram": 56, "create_synthetic_dataframe_regress": 56, "synthetic_train_test_data_regress": 58, "synthetic_categorical_data": 58, "create_data_with_nul": 58, "create_data_with_many_uniqu": 58, "test_plot_pie_chart": 58, "test_univariate_plot": 58, "test_bi_variate_plot": 58, "test_correlation_heatmap": 58, "test_correlation_to_target": 58, "test_mutual_info_to_target": 58, "test_mutual_info_to_target_multiclass": 58, "test_mutual_info_to_target_regress": 58, "test_pca_plot": 58, "test_plot_pca_cumulative_vari": 58, "test_plot_tsn": 58, "test_plot_theil_u_heatmap": 58, "test_plot_count_pair": 58, "test_plot_null_percentag": 58, "test_check_unique_valu": 58, "test_plot_ecdf": 58, "synthetic_calibration_data": [59, 61, 65, 66], "synthetic_multiclass_train_test_data": 59, "test_blueprint_xgboost": [59, 66], "test_bluecast_with_custom_model": [59, 66], "bluecast_inst": [59, 66], "test_enable_feature_selection_warn": [59, 66], "test_hypertuning_cv_folds_warn": [59, 66], "test_missing_feature_selector_warn": [59, 66], "test_missing_xgboost_tune_params_config_warn": [59, 66], "test_min_features_to_select_warn": [59, 66], "test_shap_values_and_ml_algorithm_warn": [59, 66], "test_cat_encoding_via_ml_algorithm_and_ml_model_warn": [59, 66], "test_precise_cv_tuning_warn": [59, 66], "test_class_problem_mismatch_warn": 59, "test_bluecast_fit_binary_without_custom_model": 60, "test_blueprint_cv_xgboost": [61, 65], "customlrmodel": [61, 63, 65], "test_bluecast_cv_fit_eval_with_custom_model": [61, 65], "test_bluecast_cv_fit_eval_binary_without_custom_model": 62, "test_bluecast_cv_fit_eval_multiclass_with_custom_model": 63, "test_bluecast_cv_fit_eval_multiclass_without_custom_model": 64, "test_bluecast_cv_with_custom_object": 65, "encoder_orchestr": 67, "sample_data": [67, 77, 89], "test_fit_assigns_to_onehot_when_cardinality_below_threshold": 67, "test_fit_assigns_to_target_when_cardinality_above_threshold": 67, "monkeypatch": 68, "fixtur": 68, "pytest": [68, 94], "mock": 68, "mock_train": 68, "assert": 68, "correctli": 68, "patch": 68, "rand": 68, "predefin": 68, "randint": 68, "output": [68, 94], "gpu_hist": 68, "test_calibr": [69, 71], "test_predict": [69, 71], "test_predict_proba": 69, "test_predict_interv": [69, 71], "test_predict_set": 69, "test_prediction_set_coverag": 70, "test_prediction_interval_coverag": 70, "test_predict_interval_with_single_data_point": 71, "test_predict_interval_with_single_quantil": 71, "custom_preprocess": 72, "test_fit_transform_returns_tupl": 72, "test_transform_returns_tupl": 72, "test_transform_returns_optional_target": 72, "test_transform_returns_optional_target_prediction_mod": 72, "create_to_target_correlated_featur": 73, "create_to_target_correlated_categorical_featur": 73, "test_detect_leakage_via_correl": 73, "test_detect_categorical_leakag": 73, "mock_logg": 74, "test_kolmogorov_smirnov_test": 74, "test_population_stability_index": 74, "test_qqplot_two_sampl": 74, "sample_datafram": 75, "test_date_convert": 75, "create_synthetic_binary_data": [76, 82], "create_synthetic_prediction_set": 76, "test_one_c": 76, "test_avg_c": 76, "label_encod": 77, "trained_label_encod": 77, "test_fit_label_encod": 77, "test_label_encoder_transform": 77, "test_fit_transform_target_label": 77, "test_transform_target_label": 77, "test_label_encoder_reverse_transform": 77, "test_add_result": 78, "test_retrieve_results_as_df": 78, "test_get_best_score_empti": 78, "test_get_best_score_higher_is_bett": 78, "test_get_best_score_lower_is_bett": 78, "xgboost_model": 80, "test_fine_tune_runs_without_error": 80, "test_fine_tune_runs_without_errors_using_cv": 80, "test_load_for_production_with_default_file_typ": 81, "create_synthetic_multiclass_data": 82, "test_hinge_loss": 82, "test_margin_nonconformity_measur": 82, "test_brier_scor": 82, "create_synthetic_regression_data": 83, "test_absolute_error_loss": 83, "test_normalized_error_error_loss": 83, "test_fill_nul": 84, "test_fill_infinite_valu": 84, "example_data": 85, "test_fit_transform": 85, "test_transform": 85, "dummyclass": 86, "test_transform_same_schema": 87, "test_transform_missing_column": 87, "test_transform_extra_column": 87, "mock_model": 88, "test_data": 88, "test_eval_classifier_except": 88, "test_shap_waterfall_plot": 88, "test_shap_dependence_plot": 88, "test_transform_target_encode_binary_class": 89, "test_multi_class_target_encod": 90, "test_train_test_split_cross": 91, "test_train_test_split_tim": 91, "project": 92, "copyright": 92, "2024": 92, "thoma": [92, 94], "mei\u00dfner": [92, 94], "author": 92, "releas": 92, "extens": 92, "myst_pars": 92, "sphinx": [92, 93, 94], "ext": 92, "autodoc": 92, "autoapi": [92, 93], "napoleon": 92, "myst_heading_anchor": 92, "autoapi_typ": 92, "autoapi_dir": 92, "templates_path": 92, "_templat": 92, "exclude_pattern": 92, "html_theme": 92, "alabast": 92, "html_static_path": 92, "_static": 92, "page": 93, "conf": 93, "lightweight": 94, "tackl": 94, "focus": 94, "few": 94, "faster": 94, "develop": 94, "cycl": 94, "stabl": 94, "codebas": 94, "its": 94, "core": 94, "advanc": 94, "plenti": 94, "don": 94, "me": 94, "best": 94, "mind": 94, "summar": 94, "black": 94, "close": 94, "system": 94, "instal": 94, "comma": 94, "digit": 94, "precis": 94, "pure": 94, "rich": 94, "highest": 94, "uncertainti": 94, "quantif": 94, "open": 94, "framework": 94, "mimic": 94, "realiti": 94, "shaplei": 94, "lift": 94, "misconfigur": 94, "reach": 94, "showcas": 94, "capabl": 94, "wise": 94, "icr": 94, "6000": 94, "particip": 94, "ps3e23": 94, "softwar": 94, "defect": 94, "12": 94, "ps3e25": 94, "hard": 94, "steel": 94, "ps4e1": 94, "bank": 94, "churn": 94, "13": 94, "comprehens": 94, "guid": 94, "ensur": 94, "tool": 94, "commit": 94, "strong": 94, "hint": 94, "unit": 94, "contributor": 94, "doc": 94, "github": 94, "aspectw": 94, "xai": 94, "welcom": 94, "branch": 94, "fix": 94, "md": [92, 94], "content": 94, "push": 94, "pull": 94, "request": 94, "dev": 94, "pyproject": 94, "toml": 94, "readthedoc": 94, "requit": 94, "srtd_requir": 94, "txt": 94, "simpli": 94, "rtd_requir": 94, "abl": 94, "autobuild": 94, "html": 94, "localhost": 94, "link": 94, "creator": 94, "linkedin": 94, "source_suffix": 92, "rst": 92, "source_pars": 92}, "objects": {"": [[36, 0, 0, "-", "bluecast"], [92, 0, 0, "-", "conf"]], "bluecast": [[14, 0, 0, "-", "blueprints"], [16, 0, 0, "-", "config"], [23, 0, 0, "-", "conformal_prediction"], [28, 0, 0, "-", "eda"], [30, 0, 0, "-", "evaluation"], [32, 0, 0, "-", "experimentation"], [35, 0, 0, "-", "general_utils"], [38, 0, 0, "-", "ml_modelling"], [42, 0, 0, "-", "monitoring"], [49, 0, 0, "-", "preprocessing"], [55, 0, 0, "-", "tests"]], "bluecast.blueprints": [[10, 0, 0, "-", "cast"], [11, 0, 0, "-", "cast_cv"], [12, 0, 0, "-", "cast_cv_regression"], [13, 0, 0, "-", "cast_regression"]], "bluecast.blueprints.cast": [[10, 1, 1, "", "BlueCast"]], "bluecast.blueprints.cast.BlueCast": [[10, 2, 1, "", "calibrate"], [10, 2, 1, "", "fit"], [10, 2, 1, "", "fit_eval"], [10, 2, 1, "", "initial_checks"], [10, 2, 1, "", "predict"], [10, 2, 1, "", "predict_p_values"], [10, 2, 1, "", "predict_proba"], [10, 2, 1, "", "predict_sets"], [10, 2, 1, "", "transform_new_data"]], "bluecast.blueprints.cast_cv": [[11, 1, 1, "", "BlueCastCV"]], "bluecast.blueprints.cast_cv.BlueCastCV": [[11, 2, 1, "", "calibrate"], [11, 2, 1, "", "fit"], [11, 2, 1, "", "fit_eval"], [11, 2, 1, "", "predict"], [11, 2, 1, "", "predict_p_values"], [11, 2, 1, "", "predict_proba"], [11, 2, 1, "", "predict_sets"], [11, 2, 1, "", "prepare_data"], [11, 2, 1, "", "show_oof_scores"]], "bluecast.blueprints.cast_cv_regression": [[12, 1, 1, "", "BlueCastCVRegression"]], "bluecast.blueprints.cast_cv_regression.BlueCastCVRegression": [[12, 2, 1, "", "calibrate"], [12, 2, 1, "", "fit"], [12, 2, 1, "", "fit_eval"], [12, 2, 1, "", "predict"], [12, 2, 1, "", "predict_interval"], [12, 2, 1, "", "prepare_data"], [12, 2, 1, "", "show_oof_scores"]], "bluecast.blueprints.cast_regression": [[13, 1, 1, "", "BlueCastRegression"]], "bluecast.blueprints.cast_regression.BlueCastRegression": [[13, 2, 1, "", "calibrate"], [13, 2, 1, "", "fit"], [13, 2, 1, "", "fit_eval"], [13, 2, 1, "", "initial_checks"], [13, 2, 1, "", "predict"], [13, 2, 1, "", "predict_interval"], [13, 2, 1, "", "transform_new_data"]], "bluecast.config": [[15, 0, 0, "-", "base_classes"], [17, 0, 0, "-", "training_config"]], "bluecast.config.base_classes": [[15, 1, 1, "", "BaseClassExperimentTracker"]], "bluecast.config.base_classes.BaseClassExperimentTracker": [[15, 2, 1, "", "add_results"], [15, 2, 1, "", "retrieve_results_as_df"]], "bluecast.config.training_config": [[17, 1, 1, "", "Config"], [17, 1, 1, "", "TrainingConfig"], [17, 1, 1, "", "XgboostFinalParamConfig"], [17, 1, 1, "", "XgboostTuneParamsConfig"], [17, 1, 1, "", "XgboostTuneParamsRegressionConfig"]], "bluecast.config.training_config.Config": [[17, 3, 1, "", "arbitrary_types_allowed"]], "bluecast.config.training_config.TrainingConfig": [[17, 3, 1, "", "autotune_model"], [17, 3, 1, "", "calculate_shap_values"], [17, 3, 1, "", "cardinality_threshold_for_onehot_encoding"], [17, 3, 1, "", "cat_encoding_via_ml_algorithm"], [17, 3, 1, "", "early_stopping_rounds"], [17, 3, 1, "", "enable_feature_selection"], [17, 3, 1, "", "enable_grid_search_fine_tuning"], [17, 3, 1, "", "experiment_name"], [17, 3, 1, "", "global_random_state"], [17, 3, 1, "", "gridsearch_nb_parameters_per_grid"], [17, 3, 1, "", "gridsearch_tuning_max_runtime_secs"], [17, 3, 1, "", "hyperparameter_tuning_max_runtime_secs"], [17, 3, 1, "", "hyperparameter_tuning_rounds"], [17, 3, 1, "", "hypertuning_cv_folds"], [17, 3, 1, "", "increase_random_state_in_bluecast_cv_by"], [17, 3, 1, "", "min_features_to_select"], [17, 3, 1, "", "optuna_sampler_n_startup_trials"], [17, 3, 1, "", "precise_cv_tuning"], [17, 3, 1, "", "shap_waterfall_indices"], [17, 3, 1, "", "show_dependence_plots_of_top_n_features"], [17, 3, 1, "", "show_detailed_tuning_logs"], [17, 3, 1, "", "shuffle_during_training"], [17, 3, 1, "", "store_shap_values_in_instance"], [17, 3, 1, "", "train_size"], [17, 3, 1, "", "train_split_stratify"], [17, 3, 1, "", "use_full_data_for_final_model"]], "bluecast.config.training_config.XgboostFinalParamConfig": [[17, 3, 1, "", "classification_threshold"], [17, 3, 1, "", "params"], [17, 3, 1, "", "sample_weight"]], "bluecast.config.training_config.XgboostTuneParamsConfig": [[17, 3, 1, "", "alpha_max"], [17, 3, 1, "", "alpha_min"], [17, 3, 1, "", "booster"], [17, 3, 1, "", "col_sample_by_level_max"], [17, 3, 1, "", "col_sample_by_level_min"], [17, 3, 1, "", "col_sample_by_tree_max"], [17, 3, 1, "", "col_sample_by_tree_min"], [17, 3, 1, "", "eta_max"], [17, 3, 1, "", "eta_min"], [17, 3, 1, "", "gamma_max"], [17, 3, 1, "", "gamma_min"], [17, 3, 1, "", "lambda_max"], [17, 3, 1, "", "lambda_min"], [17, 3, 1, "", "max_depth_max"], [17, 3, 1, "", "max_depth_min"], [17, 3, 1, "", "max_leaves_max"], [17, 3, 1, "", "max_leaves_min"], [17, 3, 1, "", "steps_max"], [17, 3, 1, "", "steps_min"], [17, 3, 1, "", "sub_sample_max"], [17, 3, 1, "", "sub_sample_min"], [17, 3, 1, "", "subsample_max"], [17, 3, 1, "", "subsample_min"], [17, 3, 1, "", "verbosity_during_final_model_training"], [17, 3, 1, "", "verbosity_during_hyperparameter_tuning"], [17, 3, 1, "", "xgboost_eval_metric"], [17, 3, 1, "", "xgboost_objective"]], "bluecast.config.training_config.XgboostTuneParamsRegressionConfig": [[17, 3, 1, "", "alpha_max"], [17, 3, 1, "", "alpha_min"], [17, 3, 1, "", "booster"], [17, 3, 1, "", "col_sample_by_level_max"], [17, 3, 1, "", "col_sample_by_level_min"], [17, 3, 1, "", "col_sample_by_tree_max"], [17, 3, 1, "", "col_sample_by_tree_min"], [17, 3, 1, "", "eta_max"], [17, 3, 1, "", "eta_min"], [17, 3, 1, "", "gamma_max"], [17, 3, 1, "", "gamma_min"], [17, 3, 1, "", "lambda_max"], [17, 3, 1, "", "lambda_min"], [17, 3, 1, "", "max_depth_max"], [17, 3, 1, "", "max_depth_min"], [17, 3, 1, "", "max_leaves_max"], [17, 3, 1, "", "max_leaves_min"], [17, 3, 1, "", "steps_max"], [17, 3, 1, "", "steps_min"], [17, 3, 1, "", "sub_sample_max"], [17, 3, 1, "", "sub_sample_min"], [17, 3, 1, "", "subsample_max"], [17, 3, 1, "", "subsample_min"], [17, 3, 1, "", "verbosity_during_final_model_training"], [17, 3, 1, "", "verbosity_during_hyperparameter_tuning"], [17, 3, 1, "", "xgboost_eval_metric"], [17, 3, 1, "", "xgboost_objective"]], "bluecast.conformal_prediction": [[18, 0, 0, "-", "base_classes"], [19, 0, 0, "-", "conformal_prediction"], [20, 0, 0, "-", "conformal_prediction_regression"], [21, 0, 0, "-", "effectiveness_nonconformity_measures"], [22, 0, 0, "-", "evaluation"], [24, 0, 0, "-", "nonconformity_measures"], [25, 0, 0, "-", "nonconformity_measures_regression"]], "bluecast.conformal_prediction.base_classes": [[18, 1, 1, "", "ConformalPredictionWrapperBaseClass"]], "bluecast.conformal_prediction.base_classes.ConformalPredictionWrapperBaseClass": [[18, 2, 1, "", "calibrate"]], "bluecast.conformal_prediction.conformal_prediction": [[19, 1, 1, "", "ConformalPredictionWrapper"]], "bluecast.conformal_prediction.conformal_prediction.ConformalPredictionWrapper": [[19, 2, 1, "", "calibrate"], [19, 2, 1, "", "predict"], [19, 2, 1, "", "predict_interval"], [19, 2, 1, "", "predict_proba"], [19, 2, 1, "", "predict_sets"]], "bluecast.conformal_prediction.conformal_prediction_regression": [[20, 1, 1, "", "ConformalPredictionRegressionWrapper"]], "bluecast.conformal_prediction.conformal_prediction_regression.ConformalPredictionRegressionWrapper": [[20, 2, 1, "", "_calculate_intervals"], [20, 2, 1, "", "calibrate"], [20, 2, 1, "", "predict"], [20, 2, 1, "", "predict_interval"]], "bluecast.conformal_prediction.effectiveness_nonconformity_measures": [[21, 4, 1, "", "avg_c"], [21, 4, 1, "", "convert_expected_effectiveness_nonconformity_input_types"], [21, 4, 1, "", "one_c"], [21, 4, 1, "", "prediction_interval_spans"]], "bluecast.conformal_prediction.evaluation": [[22, 4, 1, "", "prediction_interval_coverage"], [22, 4, 1, "", "prediction_set_coverage"]], "bluecast.conformal_prediction.nonconformity_measures": [[24, 4, 1, "", "brier_score"], [24, 4, 1, "", "convert_to_numpy"], [24, 4, 1, "", "hinge_loss"], [24, 4, 1, "", "margin_nonconformity_measure"]], "bluecast.conformal_prediction.nonconformity_measures_regression": [[25, 4, 1, "", "absolute_error"], [25, 4, 1, "", "normalized_error"]], "bluecast.eda": [[26, 0, 0, "-", "analyse"], [27, 0, 0, "-", "data_leakage_checks"]], "bluecast.eda.analyse": [[26, 4, 1, "", "bi_variate_plots"], [26, 4, 1, "", "check_unique_values"], [26, 4, 1, "", "conditional_entropy"], [26, 4, 1, "", "correlation_heatmap"], [26, 4, 1, "", "correlation_to_target"], [26, 4, 1, "", "mutual_info_to_target"], [26, 4, 1, "", "plot_count_pair"], [26, 4, 1, "", "plot_count_pairs"], [26, 4, 1, "", "plot_ecdf"], [26, 4, 1, "", "plot_null_percentage"], [26, 4, 1, "", "plot_pca"], [26, 4, 1, "", "plot_pca_cumulative_variance"], [26, 4, 1, "", "plot_pie_chart"], [26, 4, 1, "", "plot_theil_u_heatmap"], [26, 4, 1, "", "plot_tsne"], [26, 4, 1, "", "theil_u"], [26, 4, 1, "", "univariate_plots"]], "bluecast.eda.data_leakage_checks": [[27, 4, 1, "", "detect_categorical_leakage"], [27, 4, 1, "", "detect_leakage_via_correlation"]], "bluecast.evaluation": [[29, 0, 0, "-", "eval_metrics"], [31, 0, 0, "-", "shap_values"]], "bluecast.evaluation.eval_metrics": [[29, 4, 1, "", "balanced_log_loss"], [29, 4, 1, "", "eval_classifier"], [29, 4, 1, "", "eval_regressor"], [29, 4, 1, "", "plot_lift_chart"], [29, 4, 1, "", "plot_probability_distribution"], [29, 4, 1, "", "plot_roc_auc"]], "bluecast.evaluation.shap_values": [[31, 4, 1, "", "get_most_important_features_by_shap_values"], [31, 4, 1, "", "shap_dependence_plots"], [31, 4, 1, "", "shap_explanations"], [31, 4, 1, "", "shap_waterfall_plot"]], "bluecast.experimentation": [[33, 0, 0, "-", "tracking"]], "bluecast.experimentation.tracking": [[33, 1, 1, "", "ExperimentTracker"]], "bluecast.experimentation.tracking.ExperimentTracker": [[33, 2, 1, "", "add_results"], [33, 2, 1, "", "get_best_score"], [33, 2, 1, "", "retrieve_results_as_df"]], "bluecast.general_utils": [[34, 0, 0, "-", "general_utils"]], "bluecast.general_utils.general_utils": [[34, 4, 1, "", "check_gpu_support"], [34, 4, 1, "", "load_for_production"], [34, 4, 1, "", "logger"], [34, 4, 1, "", "save_to_production"]], "bluecast.ml_modelling": [[37, 0, 0, "-", "base_classes"], [39, 0, 0, "-", "xgboost"], [40, 0, 0, "-", "xgboost_regression"]], "bluecast.ml_modelling.base_classes": [[37, 1, 1, "", "BaseClassMlModel"], [37, 1, 1, "", "BaseClassMlRegressionModel"], [37, 5, 1, "", "PredictedClasses"], [37, 5, 1, "", "PredictedProbas"]], "bluecast.ml_modelling.base_classes.BaseClassMlModel": [[37, 2, 1, "", "fit"], [37, 2, 1, "", "predict"]], "bluecast.ml_modelling.base_classes.BaseClassMlRegressionModel": [[37, 2, 1, "", "fit"], [37, 2, 1, "", "predict"]], "bluecast.ml_modelling.xgboost": [[39, 1, 1, "", "XgboostModel"]], "bluecast.ml_modelling.xgboost.XgboostModel": [[39, 2, 1, "", "_fine_tune_precise"], [39, 2, 1, "", "autotune"], [39, 2, 1, "", "calculate_class_weights"], [39, 2, 1, "", "check_load_confs"], [39, 2, 1, "", "constant_loss_degregation_factor"], [39, 2, 1, "", "create_d_matrices"], [39, 2, 1, "", "fine_tune"], [39, 2, 1, "", "fit"], [39, 2, 1, "", "get_best_score"], [39, 2, 1, "", "increasing_noise_evaluator"], [39, 2, 1, "", "predict"], [39, 2, 1, "", "predict_proba"], [39, 2, 1, "", "train_single_fold_model"]], "bluecast.ml_modelling.xgboost_regression": [[40, 1, 1, "", "XgboostModelRegression"]], "bluecast.ml_modelling.xgboost_regression.XgboostModelRegression": [[40, 2, 1, "", "_fine_tune_precise"], [40, 2, 1, "", "autotune"], [40, 2, 1, "", "check_load_confs"], [40, 2, 1, "", "constant_loss_degregation_factor"], [40, 2, 1, "", "create_d_matrices"], [40, 2, 1, "", "fine_tune"], [40, 2, 1, "", "fit"], [40, 2, 1, "", "get_best_score"], [40, 2, 1, "", "increasing_noise_evaluator"], [40, 2, 1, "", "predict"], [40, 2, 1, "", "train_single_fold_model"]], "bluecast.monitoring": [[41, 0, 0, "-", "data_monitoring"]], "bluecast.monitoring.data_monitoring": [[41, 1, 1, "", "DataDrift"]], "bluecast.monitoring.data_monitoring.DataDrift": [[41, 2, 1, "", "_calculate_psi"], [41, 2, 1, "", "kolmogorov_smirnov_test"], [41, 2, 1, "", "population_stability_index"], [41, 2, 1, "", "qqplot_two_samples"]], "bluecast.preprocessing": [[43, 0, 0, "-", "category_encoder_orchestration"], [44, 0, 0, "-", "custom"], [45, 0, 0, "-", "datetime_features"], [46, 0, 0, "-", "encode_target_labels"], [47, 0, 0, "-", "feature_selection"], [48, 0, 0, "-", "feature_types"], [50, 0, 0, "-", "nulls_and_infs"], [51, 0, 0, "-", "onehot_encoding"], [52, 0, 0, "-", "schema_checks"], [53, 0, 0, "-", "target_encoding"], [54, 0, 0, "-", "train_test_split"]], "bluecast.preprocessing.category_encoder_orchestration": [[43, 1, 1, "", "CategoryEncoderOrchestrator"]], "bluecast.preprocessing.category_encoder_orchestration.CategoryEncoderOrchestrator": [[43, 2, 1, "", "fit"]], "bluecast.preprocessing.custom": [[44, 1, 1, "", "CustomPreprocessing"]], "bluecast.preprocessing.custom.CustomPreprocessing": [[44, 2, 1, "", "fit_transform"], [44, 2, 1, "", "transform"]], "bluecast.preprocessing.datetime_features": [[45, 4, 1, "", "date_converter"]], "bluecast.preprocessing.encode_target_labels": [[46, 1, 1, "", "TargetLabelEncoder"]], "bluecast.preprocessing.encode_target_labels.TargetLabelEncoder": [[46, 2, 1, "", "fit_label_encoder"], [46, 2, 1, "", "fit_transform_target_labels"], [46, 2, 1, "", "label_encoder_reverse_transform"], [46, 2, 1, "", "label_encoder_transform"], [46, 2, 1, "", "transform_target_labels"]], "bluecast.preprocessing.feature_selection": [[47, 1, 1, "", "RFECVSelector"]], "bluecast.preprocessing.feature_selection.RFECVSelector": [[47, 2, 1, "", "fit_transform"], [47, 2, 1, "", "transform"]], "bluecast.preprocessing.feature_types": [[48, 1, 1, "", "FeatureTypeDetector"]], "bluecast.preprocessing.feature_types.FeatureTypeDetector": [[48, 2, 1, "", "cast_rest_columns_to_object"], [48, 2, 1, "", "fit_transform_feature_types"], [48, 2, 1, "", "identify_bool_columns"], [48, 2, 1, "", "identify_date_time_columns"], [48, 2, 1, "", "identify_num_columns"], [48, 2, 1, "", "transform_feature_types"]], "bluecast.preprocessing.nulls_and_infs": [[50, 4, 1, "", "fill_infinite_values"], [50, 4, 1, "", "fill_nulls"]], "bluecast.preprocessing.onehot_encoding": [[51, 1, 1, "", "OneHotCategoryEncoder"]], "bluecast.preprocessing.onehot_encoding.OneHotCategoryEncoder": [[51, 2, 1, "", "fit_transform"], [51, 2, 1, "", "transform"]], "bluecast.preprocessing.schema_checks": [[52, 1, 1, "", "SchemaDetector"]], "bluecast.preprocessing.schema_checks.SchemaDetector": [[52, 2, 1, "", "fit"], [52, 2, 1, "", "transform"]], "bluecast.preprocessing.target_encoding": [[53, 1, 1, "", "BinaryClassTargetEncoder"], [53, 1, 1, "", "MultiClassTargetEncoder"]], "bluecast.preprocessing.target_encoding.BinaryClassTargetEncoder": [[53, 2, 1, "", "fit_target_encode_binary_class"], [53, 2, 1, "", "transform_target_encode_binary_class"]], "bluecast.preprocessing.target_encoding.MultiClassTargetEncoder": [[53, 2, 1, "", "fit_target_encode_multiclass"], [53, 2, 1, "", "transform_target_encode_multiclass"]], "bluecast.preprocessing.train_test_split": [[54, 4, 1, "", "train_test_split"], [54, 4, 1, "", "train_test_split_cross"], [54, 4, 1, "", "train_test_split_time"]], "bluecast.tests": [[57, 0, 0, "-", "make_data"], [58, 0, 0, "-", "test_analyse"], [59, 0, 0, "-", "test_cast"], [60, 0, 0, "-", "test_cast_binary_conformal_prediction"], [61, 0, 0, "-", "test_cast_cv"], [62, 0, 0, "-", "test_cast_cv_binary_conformal_prediction"], [63, 0, 0, "-", "test_cast_cv_multiclass"], [64, 0, 0, "-", "test_cast_cv_multiclass_conformal_prediction"], [65, 0, 0, "-", "test_cast_cv_regression"], [66, 0, 0, "-", "test_cast_regression"], [67, 0, 0, "-", "test_category_encoder_orchestrator"], [68, 0, 0, "-", "test_check_gpu_support"], [69, 0, 0, "-", "test_conformal_prediction"], [70, 0, 0, "-", "test_conformal_prediction_evaluation"], [71, 0, 0, "-", "test_conformal_prediction_regression"], [72, 0, 0, "-", "test_custom_processing_base_class"], [73, 0, 0, "-", "test_data_leakage_checks"], [74, 0, 0, "-", "test_data_monitoring"], [75, 0, 0, "-", "test_datetime_features"], [76, 0, 0, "-", "test_effectiveness_nonconformity_measures"], [77, 0, 0, "-", "test_encode_target_labels"], [78, 0, 0, "-", "test_experiment_tracker"], [79, 0, 0, "-", "test_feature_type_detector"], [80, 0, 0, "-", "test_fine_tune"], [81, 0, 0, "-", "test_load_for_production"], [82, 0, 0, "-", "test_nonconformity_measures"], [83, 0, 0, "-", "test_nonconformity_measures_regression"], [84, 0, 0, "-", "test_nulls_and_infs"], [85, 0, 0, "-", "test_onehot_encoding"], [86, 0, 0, "-", "test_save_to_production"], [87, 0, 0, "-", "test_schema_checks"], [88, 0, 0, "-", "test_shap_explanations"], [89, 0, 0, "-", "test_target_encoding_binary"], [90, 0, 0, "-", "test_target_encoding_multiclass"], [91, 0, 0, "-", "test_train_test_split"]], "bluecast.tests.make_data": [[56, 0, 0, "-", "create_data"]], "bluecast.tests.make_data.create_data": [[56, 4, 1, "", "create_synthetic_dataframe"], [56, 4, 1, "", "create_synthetic_dataframe_regression"], [56, 4, 1, "", "create_synthetic_multiclass_dataframe"]], "bluecast.tests.test_analyse": [[58, 4, 1, "", "create_data_with_many_uniques"], [58, 4, 1, "", "create_data_with_nulls"], [58, 4, 1, "", "synthetic_categorical_data"], [58, 4, 1, "", "synthetic_train_test_data"], [58, 4, 1, "", "synthetic_train_test_data_regression"], [58, 4, 1, "", "test_bi_variate_plots"], [58, 4, 1, "", "test_check_unique_values"], [58, 4, 1, "", "test_correlation_heatmap"], [58, 4, 1, "", "test_correlation_to_target"], [58, 4, 1, "", "test_mutual_info_to_target"], [58, 4, 1, "", "test_mutual_info_to_target_multiclass"], [58, 4, 1, "", "test_mutual_info_to_target_regression"], [58, 4, 1, "", "test_pca_plot"], [58, 4, 1, "", "test_plot_count_pairs"], [58, 4, 1, "", "test_plot_ecdf"], [58, 4, 1, "", "test_plot_null_percentage"], [58, 4, 1, "", "test_plot_pca_cumulative_variance"], [58, 4, 1, "", "test_plot_pie_chart"], [58, 4, 1, "", "test_plot_theil_u_heatmap"], [58, 4, 1, "", "test_plot_tsne"], [58, 4, 1, "", "test_univariate_plots"]], "bluecast.tests.test_cast": [[59, 1, 1, "", "CustomModel"], [59, 4, 1, "", "bluecast_instance"], [59, 4, 1, "", "synthetic_calibration_data"], [59, 4, 1, "", "synthetic_multiclass_train_test_data"], [59, 4, 1, "", "synthetic_train_test_data"], [59, 4, 1, "", "test_bluecast_with_custom_model"], [59, 4, 1, "", "test_blueprint_xgboost"], [59, 4, 1, "", "test_cat_encoding_via_ml_algorithm_and_ml_model_warning"], [59, 4, 1, "", "test_class_problem_mismatch_warnings"], [59, 4, 1, "", "test_enable_feature_selection_warning"], [59, 4, 1, "", "test_hypertuning_cv_folds_warning"], [59, 4, 1, "", "test_min_features_to_select_warning"], [59, 4, 1, "", "test_missing_feature_selector_warning"], [59, 4, 1, "", "test_missing_xgboost_tune_params_config_warning"], [59, 4, 1, "", "test_precise_cv_tuning_warnings"], [59, 4, 1, "", "test_shap_values_and_ml_algorithm_warning"]], "bluecast.tests.test_cast.CustomModel": [[59, 2, 1, "", "fit"], [59, 2, 1, "", "predict"]], "bluecast.tests.test_cast_binary_conformal_prediction": [[60, 4, 1, "", "test_bluecast_fit_binary_without_custom_model"]], "bluecast.tests.test_cast_cv": [[61, 1, 1, "", "CustomLRModel"], [61, 4, 1, "", "synthetic_calibration_data"], [61, 4, 1, "", "synthetic_train_test_data"], [61, 4, 1, "", "test_bluecast_cv_fit_eval_with_custom_model"], [61, 4, 1, "", "test_blueprint_cv_xgboost"]], "bluecast.tests.test_cast_cv.CustomLRModel": [[61, 2, 1, "", "fit"], [61, 2, 1, "", "predict"]], "bluecast.tests.test_cast_cv_binary_conformal_prediction": [[62, 4, 1, "", "test_bluecast_cv_fit_eval_binary_without_custom_model"]], "bluecast.tests.test_cast_cv_multiclass": [[63, 1, 1, "", "CustomLRModel"], [63, 4, 1, "", "test_bluecast_cv_fit_eval_multiclass_with_custom_model"]], "bluecast.tests.test_cast_cv_multiclass.CustomLRModel": [[63, 2, 1, "", "fit"], [63, 2, 1, "", "predict"]], "bluecast.tests.test_cast_cv_multiclass_conformal_prediction": [[64, 4, 1, "", "test_bluecast_cv_fit_eval_multiclass_without_custom_model"]], "bluecast.tests.test_cast_cv_regression": [[65, 1, 1, "", "CustomLRModel"], [65, 1, 1, "", "CustomModel"], [65, 1, 1, "", "MyCustomLastMilePreprocessing"], [65, 4, 1, "", "synthetic_calibration_data"], [65, 4, 1, "", "synthetic_train_test_data"], [65, 4, 1, "", "test_bluecast_cv_fit_eval_with_custom_model"], [65, 4, 1, "", "test_bluecast_cv_with_custom_objects"], [65, 4, 1, "", "test_blueprint_cv_xgboost"]], "bluecast.tests.test_cast_cv_regression.CustomLRModel": [[65, 2, 1, "", "fit"], [65, 2, 1, "", "predict"]], "bluecast.tests.test_cast_cv_regression.CustomModel": [[65, 2, 1, "", "fit"], [65, 2, 1, "", "predict"]], "bluecast.tests.test_cast_cv_regression.MyCustomLastMilePreprocessing": [[65, 2, 1, "", "custom_function"], [65, 2, 1, "", "fit_transform"], [65, 2, 1, "", "transform"]], "bluecast.tests.test_cast_regression": [[66, 1, 1, "", "CustomModel"], [66, 4, 1, "", "bluecast_instance"], [66, 4, 1, "", "synthetic_calibration_data"], [66, 4, 1, "", "synthetic_train_test_data"], [66, 4, 1, "", "test_bluecast_with_custom_model"], [66, 4, 1, "", "test_blueprint_xgboost"], [66, 4, 1, "", "test_cat_encoding_via_ml_algorithm_and_ml_model_warning"], [66, 4, 1, "", "test_enable_feature_selection_warning"], [66, 4, 1, "", "test_hypertuning_cv_folds_warning"], [66, 4, 1, "", "test_min_features_to_select_warning"], [66, 4, 1, "", "test_missing_feature_selector_warning"], [66, 4, 1, "", "test_missing_xgboost_tune_params_config_warning"], [66, 4, 1, "", "test_precise_cv_tuning_warnings"], [66, 4, 1, "", "test_shap_values_and_ml_algorithm_warning"]], "bluecast.tests.test_cast_regression.CustomModel": [[66, 2, 1, "", "fit"], [66, 2, 1, "", "predict"]], "bluecast.tests.test_category_encoder_orchestrator": [[67, 4, 1, "", "encoder_orchestrator"], [67, 4, 1, "", "sample_data"], [67, 4, 1, "", "test_fit_assigns_to_onehot_when_cardinality_below_threshold"], [67, 4, 1, "", "test_fit_assigns_to_target_when_cardinality_above_threshold"]], "bluecast.tests.test_check_gpu_support": [[68, 4, 1, "", "test_check_gpu_support"]], "bluecast.tests.test_conformal_prediction": [[69, 4, 1, "", "test_calibrate"], [69, 4, 1, "", "test_predict"], [69, 4, 1, "", "test_predict_interval"], [69, 4, 1, "", "test_predict_proba"], [69, 4, 1, "", "test_predict_sets"]], "bluecast.tests.test_conformal_prediction_evaluation": [[70, 4, 1, "", "test_prediction_interval_coverage"], [70, 4, 1, "", "test_prediction_set_coverage"]], "bluecast.tests.test_conformal_prediction_regression": [[71, 4, 1, "", "test_calibrate"], [71, 4, 1, "", "test_predict"], [71, 4, 1, "", "test_predict_interval"], [71, 4, 1, "", "test_predict_interval_with_single_data_point"], [71, 4, 1, "", "test_predict_interval_with_single_quantile"]], "bluecast.tests.test_custom_processing_base_class": [[72, 4, 1, "", "custom_preprocessing"], [72, 4, 1, "", "test_fit_transform_returns_tuple"], [72, 4, 1, "", "test_transform_returns_optional_target"], [72, 4, 1, "", "test_transform_returns_optional_target_prediction_mode"], [72, 4, 1, "", "test_transform_returns_tuple"]], "bluecast.tests.test_data_leakage_checks": [[73, 4, 1, "", "create_to_target_correlated_categorical_features"], [73, 4, 1, "", "create_to_target_correlated_features"], [73, 4, 1, "", "test_detect_categorical_leakage"], [73, 4, 1, "", "test_detect_leakage_via_correlation"]], "bluecast.tests.test_data_monitoring": [[74, 4, 1, "", "mock_logger"], [74, 4, 1, "", "test_kolmogorov_smirnov_test"], [74, 4, 1, "", "test_population_stability_index"], [74, 4, 1, "", "test_qqplot_two_samples"]], "bluecast.tests.test_datetime_features": [[75, 4, 1, "", "sample_dataframe"], [75, 4, 1, "", "test_date_converter"]], "bluecast.tests.test_effectiveness_nonconformity_measures": [[76, 4, 1, "", "create_synthetic_binary_data"], [76, 4, 1, "", "create_synthetic_prediction_set"], [76, 4, 1, "", "test_avg_c"], [76, 4, 1, "", "test_one_c"]], "bluecast.tests.test_encode_target_labels": [[77, 4, 1, "", "label_encoder"], [77, 4, 1, "", "sample_data"], [77, 4, 1, "", "test_fit_label_encoder"], [77, 4, 1, "", "test_fit_transform_target_labels"], [77, 4, 1, "", "test_label_encoder_reverse_transform"], [77, 4, 1, "", "test_label_encoder_transform"], [77, 4, 1, "", "test_transform_target_labels"], [77, 4, 1, "", "trained_label_encoder"]], "bluecast.tests.test_experiment_tracker": [[78, 4, 1, "", "experiment_tracker"], [78, 4, 1, "", "test_add_results"], [78, 4, 1, "", "test_get_best_score_empty"], [78, 4, 1, "", "test_get_best_score_higher_is_better"], [78, 4, 1, "", "test_get_best_score_lower_is_better"], [78, 4, 1, "", "test_retrieve_results_as_df"]], "bluecast.tests.test_feature_type_detector": [[79, 4, 1, "", "test_feature_type_detector"]], "bluecast.tests.test_fine_tune": [[80, 4, 1, "", "test_fine_tune_runs_without_errors"], [80, 4, 1, "", "test_fine_tune_runs_without_errors_using_cv"], [80, 4, 1, "", "xgboost_model"]], "bluecast.tests.test_load_for_production": [[81, 4, 1, "", "test_load_for_production"], [81, 4, 1, "", "test_load_for_production_with_default_file_type"]], "bluecast.tests.test_nonconformity_measures": [[82, 4, 1, "", "create_synthetic_binary_data"], [82, 4, 1, "", "create_synthetic_multiclass_data"], [82, 4, 1, "", "test_brier_score"], [82, 4, 1, "", "test_hinge_loss"], [82, 4, 1, "", "test_margin_nonconformity_measure"]], "bluecast.tests.test_nonconformity_measures_regression": [[83, 4, 1, "", "create_synthetic_regression_data"], [83, 4, 1, "", "test_absolute_error_loss"], [83, 4, 1, "", "test_normalized_error_error_loss"]], "bluecast.tests.test_nulls_and_infs": [[84, 4, 1, "", "test_fill_infinite_values"], [84, 4, 1, "", "test_fill_nulls"]], "bluecast.tests.test_onehot_encoding": [[85, 4, 1, "", "example_data"], [85, 4, 1, "", "test_fit_transform"], [85, 4, 1, "", "test_transform"]], "bluecast.tests.test_save_to_production": [[86, 1, 1, "", "DummyClass"], [86, 4, 1, "", "test_save_to_production"]], "bluecast.tests.test_schema_checks": [[87, 4, 1, "", "test_transform_extra_columns"], [87, 4, 1, "", "test_transform_missing_columns"], [87, 4, 1, "", "test_transform_same_schema"]], "bluecast.tests.test_shap_explanations": [[88, 4, 1, "", "mock_model"], [88, 4, 1, "", "test_data"], [88, 4, 1, "", "test_eval_classifier_except"], [88, 4, 1, "", "test_shap_dependence_plots"], [88, 4, 1, "", "test_shap_explanations"], [88, 4, 1, "", "test_shap_waterfall_plot"]], "bluecast.tests.test_target_encoding_binary": [[89, 4, 1, "", "sample_data"], [89, 4, 1, "", "test_transform_target_encode_binary_class"]], "bluecast.tests.test_target_encoding_multiclass": [[90, 4, 1, "", "test_multi_class_target_encoder"]], "bluecast.tests.test_train_test_split": [[91, 4, 1, "", "test_train_test_split_cross"], [91, 4, 1, "", "test_train_test_split_time"]], "conf": [[92, 5, 1, "", "author"], [92, 5, 1, "", "autoapi_dirs"], [92, 5, 1, "", "autoapi_type"], [92, 5, 1, "", "copyright"], [92, 5, 1, "", "exclude_patterns"], [92, 5, 1, "", "extensions"], [92, 5, 1, "", "html_static_path"], [92, 5, 1, "", "html_theme"], [92, 5, 1, "", "myst_heading_anchors"], [92, 5, 1, "", "project"], [92, 5, 1, "", "release"], [92, 5, 1, "", "source_parsers"], [92, 5, 1, "", "source_suffix"], [92, 5, 1, "", "templates_path"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:attribute", "4": "py:function", "5": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "data", "Python data"]}, "titleterms": {"advanc": 0, "usag": [0, 1, 94], "enabl": 0, "cross": 0, "valid": 0, "even": 0, "more": 0, "overfit": 0, "robust": 0, "gain": [0, 4], "extra": 0, "perform": [0, 7], "us": [0, 4], "multi": 0, "model": [0, 2, 7, 9], "blend": 0, "pipelin": 0, "categor": [0, 3], "encod": 0, "basic": [1, 94], "custom": [2, 4, 8, 44], "configur": 2, "object": 2, "train": [2, 7], "preprocess": [2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "featur": [2, 3, 94], "select": 2, "ml": 2, "explanatori": 3, "analysi": 3, "type": 3, "detect": 3, "pie": 3, "chart": 3, "null": 3, "per": 3, "column": 3, "univari": 3, "plot": [3, 7], "empir": 3, "cumul": 3, "densiti": 3, "function": [3, 21, 22, 24, 25, 26, 27, 29, 31, 34, 45, 50, 54, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "ecdf": 3, "bivari": 3, "count": 3, "pair": 3, "correl": 3, "target": 3, "heatmap": 3, "associ": 3, "mutual": 3, "inform": 3, "princip": 3, "compon": 3, "pca": 3, "varianc": 3, "t": 3, "sne": 3, "leakag": 3, "experi": 4, "track": [4, 33], "inbuilt": 4, "experienttrack": 4, "insight": 4, "across": 4, "mlflow": 4, "via": 4, "api": [4, 93], "instal": 5, "end": 5, "user": 5, "develop": 5, "explain": 7, "xai": 7, "hyperparamet": 7, "tune": 7, "shap": 7, "valu": 7, "decis": 7, "tree": 7, "access": 7, "bluecast": [7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94], "class": [7, 10, 11, 12, 13, 15, 17, 18, 19, 20, 33, 37, 39, 40, 41, 43, 44, 46, 47, 48, 51, 52, 53, 59, 61, 63, 65, 66, 86], "bluecastcv": 7, "monitor": [8, 41, 42], "data": 8, "drift": 8, "checker": 8, "uncertainti": 9, "quantif": 9, "conform": 9, "predict": 9, "classif": 9, "regress": 9, "non": 9, "blueprint": [10, 11, 12, 13, 14], "cast": 10, "modul": [10, 11, 12, 13, 15, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 29, 31, 33, 34, 37, 39, 40, 41, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "content": [10, 11, 12, 13, 15, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 29, 31, 33, 34, 37, 39, 40, 41, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "cast_cv": 11, "cast_cv_regress": 12, "cast_regress": 13, "submodul": [14, 16, 23, 28, 30, 32, 35, 38, 42, 49, 55, 57], "config": [15, 16, 17], "base_class": [15, 18, 37], "training_config": 17, "conformal_predict": [18, 19, 20, 21, 22, 23, 24, 25], "conformal_prediction_regress": 20, "effectiveness_nonconformity_measur": 21, "evalu": [22, 29, 30, 31], "nonconformity_measur": 24, "nonconformity_measures_regress": 25, "eda": [26, 27, 28], "analys": 26, "data_leakage_check": 27, "eval_metr": 29, "shap_valu": 31, "experiment": [32, 33], "general_util": [34, 35], "subpackag": [36, 55], "ml_model": [37, 38, 39, 40], "attribut": 37, "xgboost": 39, "xgboost_regress": 40, "data_monitor": 41, "category_encoder_orchestr": 43, "datetime_featur": 45, "encode_target_label": 46, "feature_select": 47, "feature_typ": 48, "nulls_and_inf": 50, "onehot_encod": 51, "schema_check": 52, "target_encod": 53, "train_test_split": 54, "test": [55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "make_data": [56, 57], "create_data": 56, "test_analys": 58, "test_cast": 59, "test_cast_binary_conformal_predict": 60, "test_cast_cv": 61, "test_cast_cv_binary_conformal_predict": 62, "test_cast_cv_multiclass": 63, "test_cast_cv_multiclass_conformal_predict": 64, "test_cast_cv_regress": 65, "test_cast_regress": 66, "test_category_encoder_orchestr": 67, "test_check_gpu_support": 68, "test_conformal_predict": 69, "test_conformal_prediction_evalu": 70, "test_conformal_prediction_regress": 71, "test_custom_processing_base_class": 72, "test_data_leakage_check": 73, "test_data_monitor": 74, "test_datetime_featur": 75, "test_effectiveness_nonconformity_measur": 76, "test_encode_target_label": 77, "test_experiment_track": 78, "test_feature_type_detector": 79, "test_fine_tun": 80, "test_load_for_product": 81, "test_nonconformity_measur": 82, "test_nonconformity_measures_regress": 83, "test_nulls_and_inf": 84, "test_onehot_encod": 85, "test_save_to_product": 86, "test_schema_check": 87, "test_shap_explan": 88, "test_target_encoding_binari": 89, "test_target_encoding_multiclass": 90, "test_train_test_split": 91, "conf": 92, "refer": 93, "philosophi": 94, "what": 94, "ha": 94, "offer": 94, "conveni": 94, "kaggl": 94, "competit": 94, "result": 94, "exampl": 94, "notebook": 94, "about": 94, "code": 94, "qualiti": 94, "document": 94, "how": 94, "contribut": 94, "meta": 94}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1, "sphinx": 57}, "alltitles": {"Advanced usage": [[0, "advanced-usage"]], "Enable cross-validation": [[0, "enable-cross-validation"]], "Enable even more overfitting-robust cross-validation": [[0, "enable-even-more-overfitting-robust-cross-validation"]], "Gaining extra performance": [[0, "gaining-extra-performance"]], "Use multi-model blended pipeline": [[0, "use-multi-model-blended-pipeline"]], "Categorical encoding": [[0, "categorical-encoding"]], "Basic usage": [[1, "basic-usage"], [94, "basic-usage"]], "Customizing configurations and objects": [[2, "customizing-configurations-and-objects"]], "Custom training configuration": [[2, "custom-training-configuration"]], "Custom preprocessing": [[2, "custom-preprocessing"]], "Custom feature selection": [[2, "custom-feature-selection"]], "Custom ML model": [[2, "custom-ml-model"]], "Explanatory analysis": [[3, "explanatory-analysis"]], "Feature type detection": [[3, "feature-type-detection"]], "Pie chart": [[3, "pie-chart"]], "Nulls per column": [[3, "nulls-per-column"]], "Univariate plots": [[3, "univariate-plots"]], "Empirical cumulative density function (eCDF)": [[3, "empirical-cumulative-density-function-ecdf"]], "Bivariate plots": [[3, "bivariate-plots"]], "Count pairs": [[3, "count-pairs"]], "Correlation to the target": [[3, "correlation-to-the-target"]], "Correlation heatmap": [[3, "correlation-heatmap"]], "Association of categorical features": [[3, "association-of-categorical-features"]], "Mutual information": [[3, "mutual-information"]], "Principal components analysis (PCA)": [[3, "principal-components-analysis-pca"]], "PCA cumulative variance": [[3, "pca-cumulative-variance"]], "t-SNE": [[3, "t-sne"]], "Target leakage": [[3, "target-leakage"]], "Experiment tracking": [[4, "experiment-tracking"]], "Using the inbuilt ExperientTracker": [[4, "using-the-inbuilt-experienttracker"]], "Gain insights across experiments": [[4, "gain-insights-across-experiments"]], "Use Mlflow via custom ExperientTracker API": [[4, "use-mlflow-via-custom-experienttracker-api"]], "Model explainability (XAI)": [[7, "model-explainability-xai"]], "Hyperparameter tuning": [[7, "hyperparameter-tuning"]], "Model performance": [[7, "model-performance"]], "SHAP values": [[7, "shap-values"]], "Plotting decision trees": [[7, "plotting-decision-trees"]], "Accessing the trained models": [[7, "accessing-the-trained-models"]], "BlueCast classes": [[7, "bluecast-classes"]], "BlueCastCV classes": [[7, "bluecastcv-classes"]], "Monitoring": [[8, "monitoring"]], "Custom data drift checker": [[8, "custom-data-drift-checker"]], "Uncertainty quantification": [[9, "uncertainty-quantification"]], "Conformal prediction for classification": [[9, "conformal-prediction-for-classification"]], "Conformal prediction for regression": [[9, "conformal-prediction-for-regression"]], "Conformal prediction for non-BlueCast models": [[9, "conformal-prediction-for-non-bluecast-models"]], "BlueCast": [[94, "bluecast"]], "Philosophy": [[94, "philosophy"]], "What BlueCast has to offer": [[94, "what-bluecast-has-to-offer"]], "Convenience features": [[94, "convenience-features"]], "Kaggle competition results and example notebooks": [[94, "kaggle-competition-results-and-example-notebooks"]], "About the code": [[94, "about-the-code"]], "Code quality": [[94, "code-quality"]], "Documentation": [[94, "documentation"]], "How to contribute": [[94, "how-to-contribute"]], "Meta": [[94, "meta"]], "Installation": [[5, "installation"]], "Installation for end users": [[5, "installation-for-end-users"]], "Installation for developers": [[5, "installation-for-developers"]], "bluecast.blueprints.cast": [[10, "module-bluecast.blueprints.cast"]], "Module Contents": [[10, "module-contents"], [11, "module-contents"], [12, "module-contents"], [13, "module-contents"], [15, "module-contents"], [17, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [29, "module-contents"], [31, "module-contents"], [33, "module-contents"], [34, "module-contents"], [37, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [46, "module-contents"], [47, "module-contents"], [48, "module-contents"], [50, "module-contents"], [51, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [56, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [72, "module-contents"], [73, "module-contents"], [74, "module-contents"], [75, "module-contents"], [76, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [86, "module-contents"], [87, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"]], "Classes": [[10, "classes"], [11, "classes"], [12, "classes"], [13, "classes"], [15, "classes"], [17, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [33, "classes"], [37, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [43, "classes"], [44, "classes"], [46, "classes"], [47, "classes"], [48, "classes"], [51, "classes"], [52, "classes"], [53, "classes"], [59, "classes"], [61, "classes"], [63, "classes"], [65, "classes"], [66, "classes"], [86, "classes"]], "bluecast.blueprints.cast_cv": [[11, "module-bluecast.blueprints.cast_cv"]], "bluecast.blueprints.cast_cv_regression": [[12, "module-bluecast.blueprints.cast_cv_regression"]], "bluecast.blueprints.cast_regression": [[13, "module-bluecast.blueprints.cast_regression"]], "bluecast.blueprints": [[14, "module-bluecast.blueprints"]], "Submodules": [[14, "submodules"], [16, "submodules"], [23, "submodules"], [28, "submodules"], [30, "submodules"], [32, "submodules"], [35, "submodules"], [38, "submodules"], [42, "submodules"], [49, "submodules"], [55, "submodules"], [57, "submodules"]], "bluecast.config.base_classes": [[15, "module-bluecast.config.base_classes"]], "bluecast.config": [[16, "module-bluecast.config"]], "bluecast.config.training_config": [[17, "module-bluecast.config.training_config"]], "bluecast.conformal_prediction.base_classes": [[18, "module-bluecast.conformal_prediction.base_classes"]], "bluecast.conformal_prediction.conformal_prediction": [[19, "module-bluecast.conformal_prediction.conformal_prediction"]], "bluecast.conformal_prediction.conformal_prediction_regression": [[20, "module-bluecast.conformal_prediction.conformal_prediction_regression"]], "bluecast.conformal_prediction.effectiveness_nonconformity_measures": [[21, "module-bluecast.conformal_prediction.effectiveness_nonconformity_measures"]], "Functions": [[21, "functions"], [22, "functions"], [24, "functions"], [25, "functions"], [26, "functions"], [27, "functions"], [29, "functions"], [31, "functions"], [34, "functions"], [45, "functions"], [50, "functions"], [54, "functions"], [56, "functions"], [58, "functions"], [59, "functions"], [60, "functions"], [61, "functions"], [62, "functions"], [63, "functions"], [64, "functions"], [65, "functions"], [66, "functions"], [67, "functions"], [68, "functions"], [69, "functions"], [70, "functions"], [71, "functions"], [72, "functions"], [73, "functions"], [74, "functions"], [75, "functions"], [76, "functions"], [77, "functions"], [78, "functions"], [79, "functions"], [80, "functions"], [81, "functions"], [82, "functions"], [83, "functions"], [84, "functions"], [85, "functions"], [86, "functions"], [87, "functions"], [88, "functions"], [89, "functions"], [90, "functions"], [91, "functions"]], "bluecast.conformal_prediction.evaluation": [[22, "module-bluecast.conformal_prediction.evaluation"]], "bluecast.conformal_prediction": [[23, "module-bluecast.conformal_prediction"]], "bluecast.conformal_prediction.nonconformity_measures": [[24, "module-bluecast.conformal_prediction.nonconformity_measures"]], "bluecast.conformal_prediction.nonconformity_measures_regression": [[25, "module-bluecast.conformal_prediction.nonconformity_measures_regression"]], "bluecast.eda.analyse": [[26, "module-bluecast.eda.analyse"]], "bluecast.eda.data_leakage_checks": [[27, "module-bluecast.eda.data_leakage_checks"]], "bluecast.eda": [[28, "module-bluecast.eda"]], "bluecast.evaluation.eval_metrics": [[29, "module-bluecast.evaluation.eval_metrics"]], "bluecast.evaluation": [[30, "module-bluecast.evaluation"]], "bluecast.evaluation.shap_values": [[31, "module-bluecast.evaluation.shap_values"]], "bluecast.experimentation": [[32, "module-bluecast.experimentation"]], "bluecast.experimentation.tracking": [[33, "module-bluecast.experimentation.tracking"]], "bluecast.general_utils.general_utils": [[34, "module-bluecast.general_utils.general_utils"]], "bluecast.general_utils": [[35, "module-bluecast.general_utils"]], "bluecast": [[36, "module-bluecast"]], "Subpackages": [[36, "subpackages"], [55, "subpackages"]], "bluecast.ml_modelling.base_classes": [[37, "module-bluecast.ml_modelling.base_classes"]], "Attributes": [[37, "attributes"]], "bluecast.ml_modelling": [[38, "module-bluecast.ml_modelling"]], "bluecast.ml_modelling.xgboost": [[39, "module-bluecast.ml_modelling.xgboost"]], "bluecast.ml_modelling.xgboost_regression": [[40, "module-bluecast.ml_modelling.xgboost_regression"]], "bluecast.monitoring.data_monitoring": [[41, "module-bluecast.monitoring.data_monitoring"]], "bluecast.monitoring": [[42, "module-bluecast.monitoring"]], "bluecast.preprocessing.category_encoder_orchestration": [[43, "module-bluecast.preprocessing.category_encoder_orchestration"]], "bluecast.preprocessing.custom": [[44, "module-bluecast.preprocessing.custom"]], "bluecast.preprocessing.datetime_features": [[45, "module-bluecast.preprocessing.datetime_features"]], "bluecast.preprocessing.encode_target_labels": [[46, "module-bluecast.preprocessing.encode_target_labels"]], "bluecast.preprocessing.feature_selection": [[47, "module-bluecast.preprocessing.feature_selection"]], "bluecast.preprocessing.feature_types": [[48, "module-bluecast.preprocessing.feature_types"]], "bluecast.preprocessing": [[49, "module-bluecast.preprocessing"]], "bluecast.preprocessing.nulls_and_infs": [[50, "module-bluecast.preprocessing.nulls_and_infs"]], "bluecast.preprocessing.onehot_encoding": [[51, "module-bluecast.preprocessing.onehot_encoding"]], "bluecast.preprocessing.schema_checks": [[52, "module-bluecast.preprocessing.schema_checks"]], "bluecast.preprocessing.target_encoding": [[53, "module-bluecast.preprocessing.target_encoding"]], "bluecast.preprocessing.train_test_split": [[54, "module-bluecast.preprocessing.train_test_split"]], "bluecast.tests": [[55, "module-bluecast.tests"]], "bluecast.tests.make_data.create_data": [[56, "module-bluecast.tests.make_data.create_data"]], "bluecast.tests.make_data": [[57, "module-bluecast.tests.make_data"]], "bluecast.tests.test_analyse": [[58, "module-bluecast.tests.test_analyse"]], "bluecast.tests.test_cast": [[59, "module-bluecast.tests.test_cast"]], "bluecast.tests.test_cast_binary_conformal_prediction": [[60, "module-bluecast.tests.test_cast_binary_conformal_prediction"]], "bluecast.tests.test_cast_cv": [[61, "module-bluecast.tests.test_cast_cv"]], "bluecast.tests.test_cast_cv_binary_conformal_prediction": [[62, "module-bluecast.tests.test_cast_cv_binary_conformal_prediction"]], "bluecast.tests.test_cast_cv_multiclass": [[63, "module-bluecast.tests.test_cast_cv_multiclass"]], "bluecast.tests.test_cast_cv_multiclass_conformal_prediction": [[64, "module-bluecast.tests.test_cast_cv_multiclass_conformal_prediction"]], "bluecast.tests.test_cast_cv_regression": [[65, "module-bluecast.tests.test_cast_cv_regression"]], "bluecast.tests.test_cast_regression": [[66, "module-bluecast.tests.test_cast_regression"]], "bluecast.tests.test_category_encoder_orchestrator": [[67, "module-bluecast.tests.test_category_encoder_orchestrator"]], "bluecast.tests.test_check_gpu_support": [[68, "module-bluecast.tests.test_check_gpu_support"]], "bluecast.tests.test_conformal_prediction": [[69, "module-bluecast.tests.test_conformal_prediction"]], "bluecast.tests.test_conformal_prediction_evaluation": [[70, "module-bluecast.tests.test_conformal_prediction_evaluation"]], "bluecast.tests.test_conformal_prediction_regression": [[71, "module-bluecast.tests.test_conformal_prediction_regression"]], "bluecast.tests.test_custom_processing_base_class": [[72, "module-bluecast.tests.test_custom_processing_base_class"]], "bluecast.tests.test_data_leakage_checks": [[73, "module-bluecast.tests.test_data_leakage_checks"]], "bluecast.tests.test_data_monitoring": [[74, "module-bluecast.tests.test_data_monitoring"]], "bluecast.tests.test_datetime_features": [[75, "module-bluecast.tests.test_datetime_features"]], "bluecast.tests.test_effectiveness_nonconformity_measures": [[76, "module-bluecast.tests.test_effectiveness_nonconformity_measures"]], "bluecast.tests.test_encode_target_labels": [[77, "module-bluecast.tests.test_encode_target_labels"]], "bluecast.tests.test_experiment_tracker": [[78, "module-bluecast.tests.test_experiment_tracker"]], "bluecast.tests.test_feature_type_detector": [[79, "module-bluecast.tests.test_feature_type_detector"]], "bluecast.tests.test_fine_tune": [[80, "module-bluecast.tests.test_fine_tune"]], "bluecast.tests.test_load_for_production": [[81, "module-bluecast.tests.test_load_for_production"]], "bluecast.tests.test_nonconformity_measures": [[82, "module-bluecast.tests.test_nonconformity_measures"]], "bluecast.tests.test_nonconformity_measures_regression": [[83, "module-bluecast.tests.test_nonconformity_measures_regression"]], "bluecast.tests.test_nulls_and_infs": [[84, "module-bluecast.tests.test_nulls_and_infs"]], "bluecast.tests.test_onehot_encoding": [[85, "module-bluecast.tests.test_onehot_encoding"]], "bluecast.tests.test_save_to_production": [[86, "module-bluecast.tests.test_save_to_production"]], "bluecast.tests.test_schema_checks": [[87, "module-bluecast.tests.test_schema_checks"]], "bluecast.tests.test_shap_explanations": [[88, "module-bluecast.tests.test_shap_explanations"]], "bluecast.tests.test_target_encoding_binary": [[89, "module-bluecast.tests.test_target_encoding_binary"]], "bluecast.tests.test_target_encoding_multiclass": [[90, "module-bluecast.tests.test_target_encoding_multiclass"]], "bluecast.tests.test_train_test_split": [[91, "module-bluecast.tests.test_train_test_split"]], "conf": [[92, "module-conf"]], "API Reference": [[93, "api-reference"]]}, "indexentries": {"bluecast (class in bluecast.blueprints.cast)": [[10, "bluecast.blueprints.cast.BlueCast"]], "bluecast.blueprints.cast": [[10, "module-bluecast.blueprints.cast"]], "calibrate() (bluecast.blueprints.cast.bluecast method)": [[10, "bluecast.blueprints.cast.BlueCast.calibrate"]], "fit() (bluecast.blueprints.cast.bluecast method)": [[10, "bluecast.blueprints.cast.BlueCast.fit"]], "fit_eval() (bluecast.blueprints.cast.bluecast method)": [[10, "bluecast.blueprints.cast.BlueCast.fit_eval"]], "initial_checks() (bluecast.blueprints.cast.bluecast method)": [[10, "bluecast.blueprints.cast.BlueCast.initial_checks"]], "module": [[10, "module-bluecast.blueprints.cast"], [11, "module-bluecast.blueprints.cast_cv"], [12, "module-bluecast.blueprints.cast_cv_regression"], [13, "module-bluecast.blueprints.cast_regression"], [14, "module-bluecast.blueprints"], [15, "module-bluecast.config.base_classes"], [16, "module-bluecast.config"], [17, "module-bluecast.config.training_config"], [18, "module-bluecast.conformal_prediction.base_classes"], [19, "module-bluecast.conformal_prediction.conformal_prediction"], [20, "module-bluecast.conformal_prediction.conformal_prediction_regression"], [21, "module-bluecast.conformal_prediction.effectiveness_nonconformity_measures"], [22, "module-bluecast.conformal_prediction.evaluation"], [23, "module-bluecast.conformal_prediction"], [24, "module-bluecast.conformal_prediction.nonconformity_measures"], [25, "module-bluecast.conformal_prediction.nonconformity_measures_regression"], [26, "module-bluecast.eda.analyse"], [27, "module-bluecast.eda.data_leakage_checks"], [28, "module-bluecast.eda"], [29, "module-bluecast.evaluation.eval_metrics"], [30, "module-bluecast.evaluation"], [31, "module-bluecast.evaluation.shap_values"], [32, "module-bluecast.experimentation"], [33, "module-bluecast.experimentation.tracking"], [34, "module-bluecast.general_utils.general_utils"], [35, "module-bluecast.general_utils"], [36, "module-bluecast"], [37, "module-bluecast.ml_modelling.base_classes"], [38, "module-bluecast.ml_modelling"], [39, "module-bluecast.ml_modelling.xgboost"], [40, "module-bluecast.ml_modelling.xgboost_regression"], [41, "module-bluecast.monitoring.data_monitoring"], [42, "module-bluecast.monitoring"], [43, "module-bluecast.preprocessing.category_encoder_orchestration"], [44, "module-bluecast.preprocessing.custom"], [45, "module-bluecast.preprocessing.datetime_features"], [46, "module-bluecast.preprocessing.encode_target_labels"], [47, "module-bluecast.preprocessing.feature_selection"], [48, "module-bluecast.preprocessing.feature_types"], [49, "module-bluecast.preprocessing"], [50, "module-bluecast.preprocessing.nulls_and_infs"], [51, "module-bluecast.preprocessing.onehot_encoding"], [52, "module-bluecast.preprocessing.schema_checks"], [53, "module-bluecast.preprocessing.target_encoding"], [54, "module-bluecast.preprocessing.train_test_split"], [55, "module-bluecast.tests"], [56, "module-bluecast.tests.make_data.create_data"], [57, "module-bluecast.tests.make_data"], [58, "module-bluecast.tests.test_analyse"], [59, "module-bluecast.tests.test_cast"], [60, "module-bluecast.tests.test_cast_binary_conformal_prediction"], [61, "module-bluecast.tests.test_cast_cv"], [62, "module-bluecast.tests.test_cast_cv_binary_conformal_prediction"], [63, "module-bluecast.tests.test_cast_cv_multiclass"], [64, "module-bluecast.tests.test_cast_cv_multiclass_conformal_prediction"], [65, "module-bluecast.tests.test_cast_cv_regression"], [66, "module-bluecast.tests.test_cast_regression"], [67, "module-bluecast.tests.test_category_encoder_orchestrator"], [68, "module-bluecast.tests.test_check_gpu_support"], [69, "module-bluecast.tests.test_conformal_prediction"], [70, "module-bluecast.tests.test_conformal_prediction_evaluation"], [71, "module-bluecast.tests.test_conformal_prediction_regression"], [72, "module-bluecast.tests.test_custom_processing_base_class"], [73, "module-bluecast.tests.test_data_leakage_checks"], [74, "module-bluecast.tests.test_data_monitoring"], [75, "module-bluecast.tests.test_datetime_features"], [76, "module-bluecast.tests.test_effectiveness_nonconformity_measures"], [77, "module-bluecast.tests.test_encode_target_labels"], [78, "module-bluecast.tests.test_experiment_tracker"], [79, "module-bluecast.tests.test_feature_type_detector"], [80, "module-bluecast.tests.test_fine_tune"], [81, "module-bluecast.tests.test_load_for_production"], [82, "module-bluecast.tests.test_nonconformity_measures"], [83, "module-bluecast.tests.test_nonconformity_measures_regression"], [84, "module-bluecast.tests.test_nulls_and_infs"], [85, "module-bluecast.tests.test_onehot_encoding"], [86, "module-bluecast.tests.test_save_to_production"], [87, "module-bluecast.tests.test_schema_checks"], [88, "module-bluecast.tests.test_shap_explanations"], [89, "module-bluecast.tests.test_target_encoding_binary"], [90, "module-bluecast.tests.test_target_encoding_multiclass"], [91, "module-bluecast.tests.test_train_test_split"], [92, "module-conf"]], "predict() (bluecast.blueprints.cast.bluecast method)": [[10, "bluecast.blueprints.cast.BlueCast.predict"]], "predict_p_values() (bluecast.blueprints.cast.bluecast method)": [[10, "bluecast.blueprints.cast.BlueCast.predict_p_values"]], "predict_proba() (bluecast.blueprints.cast.bluecast method)": [[10, "bluecast.blueprints.cast.BlueCast.predict_proba"]], "predict_sets() (bluecast.blueprints.cast.bluecast method)": [[10, "bluecast.blueprints.cast.BlueCast.predict_sets"]], "transform_new_data() (bluecast.blueprints.cast.bluecast method)": [[10, "bluecast.blueprints.cast.BlueCast.transform_new_data"]], "bluecastcv (class in bluecast.blueprints.cast_cv)": [[11, "bluecast.blueprints.cast_cv.BlueCastCV"]], "bluecast.blueprints.cast_cv": [[11, "module-bluecast.blueprints.cast_cv"]], "calibrate() (bluecast.blueprints.cast_cv.bluecastcv method)": [[11, "bluecast.blueprints.cast_cv.BlueCastCV.calibrate"]], "fit() (bluecast.blueprints.cast_cv.bluecastcv method)": [[11, "bluecast.blueprints.cast_cv.BlueCastCV.fit"]], "fit_eval() (bluecast.blueprints.cast_cv.bluecastcv method)": [[11, "bluecast.blueprints.cast_cv.BlueCastCV.fit_eval"]], "predict() (bluecast.blueprints.cast_cv.bluecastcv method)": [[11, "bluecast.blueprints.cast_cv.BlueCastCV.predict"]], "predict_p_values() (bluecast.blueprints.cast_cv.bluecastcv method)": [[11, "bluecast.blueprints.cast_cv.BlueCastCV.predict_p_values"]], "predict_proba() (bluecast.blueprints.cast_cv.bluecastcv method)": [[11, "bluecast.blueprints.cast_cv.BlueCastCV.predict_proba"]], "predict_sets() (bluecast.blueprints.cast_cv.bluecastcv method)": [[11, "bluecast.blueprints.cast_cv.BlueCastCV.predict_sets"]], "prepare_data() (bluecast.blueprints.cast_cv.bluecastcv method)": [[11, "bluecast.blueprints.cast_cv.BlueCastCV.prepare_data"]], "show_oof_scores() (bluecast.blueprints.cast_cv.bluecastcv method)": [[11, "bluecast.blueprints.cast_cv.BlueCastCV.show_oof_scores"]], "bluecastcvregression (class in bluecast.blueprints.cast_cv_regression)": [[12, "bluecast.blueprints.cast_cv_regression.BlueCastCVRegression"]], "bluecast.blueprints.cast_cv_regression": [[12, "module-bluecast.blueprints.cast_cv_regression"]], "calibrate() (bluecast.blueprints.cast_cv_regression.bluecastcvregression method)": [[12, "bluecast.blueprints.cast_cv_regression.BlueCastCVRegression.calibrate"]], "fit() (bluecast.blueprints.cast_cv_regression.bluecastcvregression method)": [[12, "bluecast.blueprints.cast_cv_regression.BlueCastCVRegression.fit"]], "fit_eval() (bluecast.blueprints.cast_cv_regression.bluecastcvregression method)": [[12, "bluecast.blueprints.cast_cv_regression.BlueCastCVRegression.fit_eval"]], "predict() (bluecast.blueprints.cast_cv_regression.bluecastcvregression method)": [[12, "bluecast.blueprints.cast_cv_regression.BlueCastCVRegression.predict"]], "predict_interval() (bluecast.blueprints.cast_cv_regression.bluecastcvregression method)": [[12, "bluecast.blueprints.cast_cv_regression.BlueCastCVRegression.predict_interval"]], "prepare_data() (bluecast.blueprints.cast_cv_regression.bluecastcvregression method)": [[12, "bluecast.blueprints.cast_cv_regression.BlueCastCVRegression.prepare_data"]], "show_oof_scores() (bluecast.blueprints.cast_cv_regression.bluecastcvregression method)": [[12, "bluecast.blueprints.cast_cv_regression.BlueCastCVRegression.show_oof_scores"]], "bluecastregression (class in bluecast.blueprints.cast_regression)": [[13, "bluecast.blueprints.cast_regression.BlueCastRegression"]], "bluecast.blueprints.cast_regression": [[13, "module-bluecast.blueprints.cast_regression"]], "calibrate() (bluecast.blueprints.cast_regression.bluecastregression method)": [[13, "bluecast.blueprints.cast_regression.BlueCastRegression.calibrate"]], "fit() (bluecast.blueprints.cast_regression.bluecastregression method)": [[13, "bluecast.blueprints.cast_regression.BlueCastRegression.fit"]], "fit_eval() (bluecast.blueprints.cast_regression.bluecastregression method)": [[13, "bluecast.blueprints.cast_regression.BlueCastRegression.fit_eval"]], "initial_checks() (bluecast.blueprints.cast_regression.bluecastregression method)": [[13, "bluecast.blueprints.cast_regression.BlueCastRegression.initial_checks"]], "predict() (bluecast.blueprints.cast_regression.bluecastregression method)": [[13, "bluecast.blueprints.cast_regression.BlueCastRegression.predict"]], "predict_interval() (bluecast.blueprints.cast_regression.bluecastregression method)": [[13, "bluecast.blueprints.cast_regression.BlueCastRegression.predict_interval"]], "transform_new_data() (bluecast.blueprints.cast_regression.bluecastregression method)": [[13, "bluecast.blueprints.cast_regression.BlueCastRegression.transform_new_data"]], "bluecast.blueprints": [[14, "module-bluecast.blueprints"]], "baseclassexperimenttracker (class in bluecast.config.base_classes)": [[15, "bluecast.config.base_classes.BaseClassExperimentTracker"]], "add_results() (bluecast.config.base_classes.baseclassexperimenttracker method)": [[15, "bluecast.config.base_classes.BaseClassExperimentTracker.add_results"]], "bluecast.config.base_classes": [[15, "module-bluecast.config.base_classes"]], "retrieve_results_as_df() (bluecast.config.base_classes.baseclassexperimenttracker method)": [[15, "bluecast.config.base_classes.BaseClassExperimentTracker.retrieve_results_as_df"]], "bluecast.config": [[16, "module-bluecast.config"]], "config (class in bluecast.config.training_config)": [[17, "bluecast.config.training_config.Config"]], "trainingconfig (class in bluecast.config.training_config)": [[17, "bluecast.config.training_config.TrainingConfig"]], "xgboostfinalparamconfig (class in bluecast.config.training_config)": [[17, "bluecast.config.training_config.XgboostFinalParamConfig"]], "xgboosttuneparamsconfig (class in bluecast.config.training_config)": [[17, "bluecast.config.training_config.XgboostTuneParamsConfig"]], "xgboosttuneparamsregressionconfig (class in bluecast.config.training_config)": [[17, "bluecast.config.training_config.XgboostTuneParamsRegressionConfig"]], "alpha_max (bluecast.config.training_config.xgboosttuneparamsconfig attribute)": [[17, "bluecast.config.training_config.XgboostTuneParamsConfig.alpha_max"]], "alpha_max (bluecast.config.training_config.xgboosttuneparamsregressionconfig attribute)": [[17, "bluecast.config.training_config.XgboostTuneParamsRegressionConfig.alpha_max"]], "alpha_min (bluecast.config.training_config.xgboosttuneparamsconfig attribute)": [[17, "bluecast.config.training_config.XgboostTuneParamsConfig.alpha_min"]], "alpha_min (bluecast.config.training_config.xgboosttuneparamsregressionconfig attribute)": [[17, "bluecast.config.training_config.XgboostTuneParamsRegressionConfig.alpha_min"]], "arbitrary_types_allowed (bluecast.config.training_config.config attribute)": [[17, "bluecast.config.training_config.Config.arbitrary_types_allowed"]], "autotune_model (bluecast.config.training_config.trainingconfig attribute)": [[17, "bluecast.config.training_config.TrainingConfig.autotune_model"]], "bluecast.config.training_config": [[17, "module-bluecast.config.training_config"]], "booster (bluecast.config.training_config.xgboosttuneparamsconfig attribute)": [[17, "bluecast.config.training_config.XgboostTuneParamsConfig.booster"]], "booster (bluecast.config.training_config.xgboosttuneparamsregressionconfig attribute)": [[17, "bluecast.config.training_config.XgboostTuneParamsRegressionConfig.booster"]], "calculate_shap_values (bluecast.config.training_config.trainingconfig attribute)": [[17, "bluecast.config.training_config.TrainingConfig.calculate_shap_values"]], "cardinality_threshold_for_onehot_encoding (bluecast.config.training_config.trainingconfig attribute)": [[17, "bluecast.config.training_config.TrainingConfig.cardinality_threshold_for_onehot_encoding"]], "cat_encoding_via_ml_algorithm (bluecast.config.training_config.trainingconfig attribute)": [[17, "bluecast.config.training_config.TrainingConfig.cat_encoding_via_ml_algorithm"]], "classification_threshold (bluecast.config.training_config.xgboostfinalparamconfig attribute)": [[17, "bluecast.config.training_config.XgboostFinalParamConfig.classification_threshold"]], "col_sample_by_level_max (bluecast.config.training_config.xgboosttuneparamsconfig attribute)": [[17, "bluecast.config.training_config.XgboostTuneParamsConfig.col_sample_by_level_max"]], "col_sample_by_level_max (bluecast.config.training_config.xgboosttuneparamsregressionconfig attribute)": [[17, "bluecast.config.training_config.XgboostTuneParamsRegressionConfig.col_sample_by_level_max"]], "col_sample_by_level_min (bluecast.config.training_config.xgboosttuneparamsconfig attribute)": [[17, "bluecast.config.training_config.XgboostTuneParamsConfig.col_sample_by_level_min"]], "col_sample_by_level_min (bluecast.config.training_config.xgboosttuneparamsregressionconfig attribute)": [[17, "bluecast.config.training_config.XgboostTuneParamsRegressionConfig.col_sample_by_level_min"]], "col_sample_by_tree_max (bluecast.config.training_config.xgboosttuneparamsconfig attribute)": [[17, "bluecast.config.training_config.XgboostTuneParamsConfig.col_sample_by_tree_max"]], "col_sample_by_tree_max (bluecast.config.training_config.xgboosttuneparamsregressionconfig attribute)": [[17, "bluecast.config.training_config.XgboostTuneParamsRegressionConfig.col_sample_by_tree_max"]], "col_sample_by_tree_min (bluecast.config.training_config.xgboosttuneparamsconfig attribute)": [[17, "bluecast.config.training_config.XgboostTuneParamsConfig.col_sample_by_tree_min"]], "col_sample_by_tree_min (bluecast.config.training_config.xgboosttuneparamsregressionconfig attribute)": [[17, "bluecast.config.training_config.XgboostTuneParamsRegressionConfig.col_sample_by_tree_min"]], "early_stopping_rounds (bluecast.config.training_config.trainingconfig attribute)": [[17, "bluecast.config.training_config.TrainingConfig.early_stopping_rounds"]], "enable_feature_selection (bluecast.config.training_config.trainingconfig attribute)": [[17, "bluecast.config.training_config.TrainingConfig.enable_feature_selection"]], "enable_grid_search_fine_tuning (bluecast.config.training_config.trainingconfig attribute)": [[17, "bluecast.config.training_config.TrainingConfig.enable_grid_search_fine_tuning"]], "eta_max (bluecast.config.training_config.xgboosttuneparamsconfig attribute)": [[17, "bluecast.config.training_config.XgboostTuneParamsConfig.eta_max"]], "eta_max (bluecast.config.training_config.xgboosttuneparamsregressionconfig attribute)": [[17, "bluecast.config.training_config.XgboostTuneParamsRegressionConfig.eta_max"]], "eta_min (bluecast.config.training_config.xgboosttuneparamsconfig attribute)": [[17, "bluecast.config.training_config.XgboostTuneParamsConfig.eta_min"]], "eta_min (bluecast.config.training_config.xgboosttuneparamsregressionconfig attribute)": [[17, "bluecast.config.training_config.XgboostTuneParamsRegressionConfig.eta_min"]], "experiment_name (bluecast.config.training_config.trainingconfig attribute)": [[17, "bluecast.config.training_config.TrainingConfig.experiment_name"]], "gamma_max (bluecast.config.training_config.xgboosttuneparamsconfig attribute)": [[17, "bluecast.config.training_config.XgboostTuneParamsConfig.gamma_max"]], "gamma_max (bluecast.config.training_config.xgboosttuneparamsregressionconfig attribute)": [[17, "bluecast.config.training_config.XgboostTuneParamsRegressionConfig.gamma_max"]], "gamma_min (bluecast.config.training_config.xgboosttuneparamsconfig attribute)": [[17, "bluecast.config.training_config.XgboostTuneParamsConfig.gamma_min"]], "gamma_min (bluecast.config.training_config.xgboosttuneparamsregressionconfig attribute)": [[17, "bluecast.config.training_config.XgboostTuneParamsRegressionConfig.gamma_min"]], "global_random_state (bluecast.config.training_config.trainingconfig attribute)": [[17, "bluecast.config.training_config.TrainingConfig.global_random_state"]], "gridsearch_nb_parameters_per_grid (bluecast.config.training_config.trainingconfig attribute)": [[17, "bluecast.config.training_config.TrainingConfig.gridsearch_nb_parameters_per_grid"]], "gridsearch_tuning_max_runtime_secs (bluecast.config.training_config.trainingconfig attribute)": [[17, "bluecast.config.training_config.TrainingConfig.gridsearch_tuning_max_runtime_secs"]], "hyperparameter_tuning_max_runtime_secs (bluecast.config.training_config.trainingconfig attribute)": [[17, "bluecast.config.training_config.TrainingConfig.hyperparameter_tuning_max_runtime_secs"]], "hyperparameter_tuning_rounds (bluecast.config.training_config.trainingconfig attribute)": [[17, "bluecast.config.training_config.TrainingConfig.hyperparameter_tuning_rounds"]], "hypertuning_cv_folds (bluecast.config.training_config.trainingconfig attribute)": [[17, "bluecast.config.training_config.TrainingConfig.hypertuning_cv_folds"]], "increase_random_state_in_bluecast_cv_by (bluecast.config.training_config.trainingconfig attribute)": [[17, "bluecast.config.training_config.TrainingConfig.increase_random_state_in_bluecast_cv_by"]], "lambda_max (bluecast.config.training_config.xgboosttuneparamsconfig attribute)": [[17, "bluecast.config.training_config.XgboostTuneParamsConfig.lambda_max"]], "lambda_max (bluecast.config.training_config.xgboosttuneparamsregressionconfig attribute)": [[17, "bluecast.config.training_config.XgboostTuneParamsRegressionConfig.lambda_max"]], "lambda_min (bluecast.config.training_config.xgboosttuneparamsconfig attribute)": [[17, "bluecast.config.training_config.XgboostTuneParamsConfig.lambda_min"]], "lambda_min (bluecast.config.training_config.xgboosttuneparamsregressionconfig attribute)": [[17, "bluecast.config.training_config.XgboostTuneParamsRegressionConfig.lambda_min"]], "max_depth_max (bluecast.config.training_config.xgboosttuneparamsconfig attribute)": [[17, "bluecast.config.training_config.XgboostTuneParamsConfig.max_depth_max"]], "max_depth_max (bluecast.config.training_config.xgboosttuneparamsregressionconfig attribute)": [[17, "bluecast.config.training_config.XgboostTuneParamsRegressionConfig.max_depth_max"]], "max_depth_min (bluecast.config.training_config.xgboosttuneparamsconfig attribute)": [[17, "bluecast.config.training_config.XgboostTuneParamsConfig.max_depth_min"]], "max_depth_min (bluecast.config.training_config.xgboosttuneparamsregressionconfig attribute)": [[17, "bluecast.config.training_config.XgboostTuneParamsRegressionConfig.max_depth_min"]], "max_leaves_max (bluecast.config.training_config.xgboosttuneparamsconfig attribute)": [[17, "bluecast.config.training_config.XgboostTuneParamsConfig.max_leaves_max"]], "max_leaves_max (bluecast.config.training_config.xgboosttuneparamsregressionconfig attribute)": [[17, "bluecast.config.training_config.XgboostTuneParamsRegressionConfig.max_leaves_max"]], "max_leaves_min (bluecast.config.training_config.xgboosttuneparamsconfig attribute)": [[17, "bluecast.config.training_config.XgboostTuneParamsConfig.max_leaves_min"]], "max_leaves_min (bluecast.config.training_config.xgboosttuneparamsregressionconfig attribute)": [[17, "bluecast.config.training_config.XgboostTuneParamsRegressionConfig.max_leaves_min"]], "min_features_to_select (bluecast.config.training_config.trainingconfig attribute)": [[17, "bluecast.config.training_config.TrainingConfig.min_features_to_select"]], "optuna_sampler_n_startup_trials (bluecast.config.training_config.trainingconfig attribute)": [[17, "bluecast.config.training_config.TrainingConfig.optuna_sampler_n_startup_trials"]], "params (bluecast.config.training_config.xgboostfinalparamconfig attribute)": [[17, "bluecast.config.training_config.XgboostFinalParamConfig.params"]], "precise_cv_tuning (bluecast.config.training_config.trainingconfig attribute)": [[17, "bluecast.config.training_config.TrainingConfig.precise_cv_tuning"]], "sample_weight (bluecast.config.training_config.xgboostfinalparamconfig attribute)": [[17, "bluecast.config.training_config.XgboostFinalParamConfig.sample_weight"]], "shap_waterfall_indices (bluecast.config.training_config.trainingconfig attribute)": [[17, "bluecast.config.training_config.TrainingConfig.shap_waterfall_indices"]], "show_dependence_plots_of_top_n_features (bluecast.config.training_config.trainingconfig attribute)": [[17, "bluecast.config.training_config.TrainingConfig.show_dependence_plots_of_top_n_features"]], "show_detailed_tuning_logs (bluecast.config.training_config.trainingconfig attribute)": [[17, "bluecast.config.training_config.TrainingConfig.show_detailed_tuning_logs"]], "shuffle_during_training (bluecast.config.training_config.trainingconfig attribute)": [[17, "bluecast.config.training_config.TrainingConfig.shuffle_during_training"]], "steps_max (bluecast.config.training_config.xgboosttuneparamsconfig attribute)": [[17, "bluecast.config.training_config.XgboostTuneParamsConfig.steps_max"]], "steps_max (bluecast.config.training_config.xgboosttuneparamsregressionconfig attribute)": [[17, "bluecast.config.training_config.XgboostTuneParamsRegressionConfig.steps_max"]], "steps_min (bluecast.config.training_config.xgboosttuneparamsconfig attribute)": [[17, "bluecast.config.training_config.XgboostTuneParamsConfig.steps_min"]], "steps_min (bluecast.config.training_config.xgboosttuneparamsregressionconfig attribute)": [[17, "bluecast.config.training_config.XgboostTuneParamsRegressionConfig.steps_min"]], "store_shap_values_in_instance (bluecast.config.training_config.trainingconfig attribute)": [[17, "bluecast.config.training_config.TrainingConfig.store_shap_values_in_instance"]], "sub_sample_max (bluecast.config.training_config.xgboosttuneparamsconfig attribute)": [[17, "bluecast.config.training_config.XgboostTuneParamsConfig.sub_sample_max"]], "sub_sample_max (bluecast.config.training_config.xgboosttuneparamsregressionconfig attribute)": [[17, "bluecast.config.training_config.XgboostTuneParamsRegressionConfig.sub_sample_max"]], "sub_sample_min (bluecast.config.training_config.xgboosttuneparamsconfig attribute)": [[17, "bluecast.config.training_config.XgboostTuneParamsConfig.sub_sample_min"]], "sub_sample_min (bluecast.config.training_config.xgboosttuneparamsregressionconfig attribute)": [[17, "bluecast.config.training_config.XgboostTuneParamsRegressionConfig.sub_sample_min"]], "subsample_max (bluecast.config.training_config.xgboosttuneparamsconfig attribute)": [[17, "bluecast.config.training_config.XgboostTuneParamsConfig.subsample_max"]], "subsample_max (bluecast.config.training_config.xgboosttuneparamsregressionconfig attribute)": [[17, "bluecast.config.training_config.XgboostTuneParamsRegressionConfig.subsample_max"]], "subsample_min (bluecast.config.training_config.xgboosttuneparamsconfig attribute)": [[17, "bluecast.config.training_config.XgboostTuneParamsConfig.subsample_min"]], "subsample_min (bluecast.config.training_config.xgboosttuneparamsregressionconfig attribute)": [[17, "bluecast.config.training_config.XgboostTuneParamsRegressionConfig.subsample_min"]], "train_size (bluecast.config.training_config.trainingconfig attribute)": [[17, "bluecast.config.training_config.TrainingConfig.train_size"]], "train_split_stratify (bluecast.config.training_config.trainingconfig attribute)": [[17, "bluecast.config.training_config.TrainingConfig.train_split_stratify"]], "use_full_data_for_final_model (bluecast.config.training_config.trainingconfig attribute)": [[17, "bluecast.config.training_config.TrainingConfig.use_full_data_for_final_model"]], "verbosity_during_final_model_training (bluecast.config.training_config.xgboosttuneparamsconfig attribute)": [[17, "bluecast.config.training_config.XgboostTuneParamsConfig.verbosity_during_final_model_training"]], "verbosity_during_final_model_training (bluecast.config.training_config.xgboosttuneparamsregressionconfig attribute)": [[17, "bluecast.config.training_config.XgboostTuneParamsRegressionConfig.verbosity_during_final_model_training"]], "verbosity_during_hyperparameter_tuning (bluecast.config.training_config.xgboosttuneparamsconfig attribute)": [[17, "bluecast.config.training_config.XgboostTuneParamsConfig.verbosity_during_hyperparameter_tuning"]], "verbosity_during_hyperparameter_tuning (bluecast.config.training_config.xgboosttuneparamsregressionconfig attribute)": [[17, "bluecast.config.training_config.XgboostTuneParamsRegressionConfig.verbosity_during_hyperparameter_tuning"]], "xgboost_eval_metric (bluecast.config.training_config.xgboosttuneparamsconfig attribute)": [[17, "bluecast.config.training_config.XgboostTuneParamsConfig.xgboost_eval_metric"]], "xgboost_eval_metric (bluecast.config.training_config.xgboosttuneparamsregressionconfig attribute)": [[17, "bluecast.config.training_config.XgboostTuneParamsRegressionConfig.xgboost_eval_metric"]], "xgboost_objective (bluecast.config.training_config.xgboosttuneparamsconfig attribute)": [[17, "bluecast.config.training_config.XgboostTuneParamsConfig.xgboost_objective"]], "xgboost_objective (bluecast.config.training_config.xgboosttuneparamsregressionconfig attribute)": [[17, "bluecast.config.training_config.XgboostTuneParamsRegressionConfig.xgboost_objective"]], "conformalpredictionwrapperbaseclass (class in bluecast.conformal_prediction.base_classes)": [[18, "bluecast.conformal_prediction.base_classes.ConformalPredictionWrapperBaseClass"]], "bluecast.conformal_prediction.base_classes": [[18, "module-bluecast.conformal_prediction.base_classes"]], "calibrate() (bluecast.conformal_prediction.base_classes.conformalpredictionwrapperbaseclass method)": [[18, "bluecast.conformal_prediction.base_classes.ConformalPredictionWrapperBaseClass.calibrate"]], "conformalpredictionwrapper (class in bluecast.conformal_prediction.conformal_prediction)": [[19, "bluecast.conformal_prediction.conformal_prediction.ConformalPredictionWrapper"]], "bluecast.conformal_prediction.conformal_prediction": [[19, "module-bluecast.conformal_prediction.conformal_prediction"]], "calibrate() (bluecast.conformal_prediction.conformal_prediction.conformalpredictionwrapper method)": [[19, "bluecast.conformal_prediction.conformal_prediction.ConformalPredictionWrapper.calibrate"]], "predict() (bluecast.conformal_prediction.conformal_prediction.conformalpredictionwrapper method)": [[19, "bluecast.conformal_prediction.conformal_prediction.ConformalPredictionWrapper.predict"]], "predict_interval() (bluecast.conformal_prediction.conformal_prediction.conformalpredictionwrapper method)": [[19, "bluecast.conformal_prediction.conformal_prediction.ConformalPredictionWrapper.predict_interval"]], "predict_proba() (bluecast.conformal_prediction.conformal_prediction.conformalpredictionwrapper method)": [[19, "bluecast.conformal_prediction.conformal_prediction.ConformalPredictionWrapper.predict_proba"]], "predict_sets() (bluecast.conformal_prediction.conformal_prediction.conformalpredictionwrapper method)": [[19, "bluecast.conformal_prediction.conformal_prediction.ConformalPredictionWrapper.predict_sets"]], "conformalpredictionregressionwrapper (class in bluecast.conformal_prediction.conformal_prediction_regression)": [[20, "bluecast.conformal_prediction.conformal_prediction_regression.ConformalPredictionRegressionWrapper"]], "_calculate_intervals() (bluecast.conformal_prediction.conformal_prediction_regression.conformalpredictionregressionwrapper method)": [[20, "bluecast.conformal_prediction.conformal_prediction_regression.ConformalPredictionRegressionWrapper._calculate_intervals"]], "bluecast.conformal_prediction.conformal_prediction_regression": [[20, "module-bluecast.conformal_prediction.conformal_prediction_regression"]], "calibrate() (bluecast.conformal_prediction.conformal_prediction_regression.conformalpredictionregressionwrapper method)": [[20, "bluecast.conformal_prediction.conformal_prediction_regression.ConformalPredictionRegressionWrapper.calibrate"]], "predict() (bluecast.conformal_prediction.conformal_prediction_regression.conformalpredictionregressionwrapper method)": [[20, "bluecast.conformal_prediction.conformal_prediction_regression.ConformalPredictionRegressionWrapper.predict"]], "predict_interval() (bluecast.conformal_prediction.conformal_prediction_regression.conformalpredictionregressionwrapper method)": [[20, "bluecast.conformal_prediction.conformal_prediction_regression.ConformalPredictionRegressionWrapper.predict_interval"]], "avg_c() (in module bluecast.conformal_prediction.effectiveness_nonconformity_measures)": [[21, "bluecast.conformal_prediction.effectiveness_nonconformity_measures.avg_c"]], "bluecast.conformal_prediction.effectiveness_nonconformity_measures": [[21, "module-bluecast.conformal_prediction.effectiveness_nonconformity_measures"]], "convert_expected_effectiveness_nonconformity_input_types() (in module bluecast.conformal_prediction.effectiveness_nonconformity_measures)": [[21, "bluecast.conformal_prediction.effectiveness_nonconformity_measures.convert_expected_effectiveness_nonconformity_input_types"]], "one_c() (in module bluecast.conformal_prediction.effectiveness_nonconformity_measures)": [[21, "bluecast.conformal_prediction.effectiveness_nonconformity_measures.one_c"]], "prediction_interval_spans() (in module bluecast.conformal_prediction.effectiveness_nonconformity_measures)": [[21, "bluecast.conformal_prediction.effectiveness_nonconformity_measures.prediction_interval_spans"]], "bluecast.conformal_prediction.evaluation": [[22, "module-bluecast.conformal_prediction.evaluation"]], "prediction_interval_coverage() (in module bluecast.conformal_prediction.evaluation)": [[22, "bluecast.conformal_prediction.evaluation.prediction_interval_coverage"]], "prediction_set_coverage() (in module bluecast.conformal_prediction.evaluation)": [[22, "bluecast.conformal_prediction.evaluation.prediction_set_coverage"]], "bluecast.conformal_prediction": [[23, "module-bluecast.conformal_prediction"]], "bluecast.conformal_prediction.nonconformity_measures": [[24, "module-bluecast.conformal_prediction.nonconformity_measures"]], "brier_score() (in module bluecast.conformal_prediction.nonconformity_measures)": [[24, "bluecast.conformal_prediction.nonconformity_measures.brier_score"]], "convert_to_numpy() (in module bluecast.conformal_prediction.nonconformity_measures)": [[24, "bluecast.conformal_prediction.nonconformity_measures.convert_to_numpy"]], "hinge_loss() (in module bluecast.conformal_prediction.nonconformity_measures)": [[24, "bluecast.conformal_prediction.nonconformity_measures.hinge_loss"]], "margin_nonconformity_measure() (in module bluecast.conformal_prediction.nonconformity_measures)": [[24, "bluecast.conformal_prediction.nonconformity_measures.margin_nonconformity_measure"]], "absolute_error() (in module bluecast.conformal_prediction.nonconformity_measures_regression)": [[25, "bluecast.conformal_prediction.nonconformity_measures_regression.absolute_error"]], "bluecast.conformal_prediction.nonconformity_measures_regression": [[25, "module-bluecast.conformal_prediction.nonconformity_measures_regression"]], "normalized_error() (in module bluecast.conformal_prediction.nonconformity_measures_regression)": [[25, "bluecast.conformal_prediction.nonconformity_measures_regression.normalized_error"]], "bi_variate_plots() (in module bluecast.eda.analyse)": [[26, "bluecast.eda.analyse.bi_variate_plots"]], "bluecast.eda.analyse": [[26, "module-bluecast.eda.analyse"]], "check_unique_values() (in module bluecast.eda.analyse)": [[26, "bluecast.eda.analyse.check_unique_values"]], "conditional_entropy() (in module bluecast.eda.analyse)": [[26, "bluecast.eda.analyse.conditional_entropy"]], "correlation_heatmap() (in module bluecast.eda.analyse)": [[26, "bluecast.eda.analyse.correlation_heatmap"]], "correlation_to_target() (in module bluecast.eda.analyse)": [[26, "bluecast.eda.analyse.correlation_to_target"]], "mutual_info_to_target() (in module bluecast.eda.analyse)": [[26, "bluecast.eda.analyse.mutual_info_to_target"]], "plot_count_pair() (in module bluecast.eda.analyse)": [[26, "bluecast.eda.analyse.plot_count_pair"]], "plot_count_pairs() (in module bluecast.eda.analyse)": [[26, "bluecast.eda.analyse.plot_count_pairs"]], "plot_ecdf() (in module bluecast.eda.analyse)": [[26, "bluecast.eda.analyse.plot_ecdf"]], "plot_null_percentage() (in module bluecast.eda.analyse)": [[26, "bluecast.eda.analyse.plot_null_percentage"]], "plot_pca() (in module bluecast.eda.analyse)": [[26, "bluecast.eda.analyse.plot_pca"]], "plot_pca_cumulative_variance() (in module bluecast.eda.analyse)": [[26, "bluecast.eda.analyse.plot_pca_cumulative_variance"]], "plot_pie_chart() (in module bluecast.eda.analyse)": [[26, "bluecast.eda.analyse.plot_pie_chart"]], "plot_theil_u_heatmap() (in module bluecast.eda.analyse)": [[26, "bluecast.eda.analyse.plot_theil_u_heatmap"]], "plot_tsne() (in module bluecast.eda.analyse)": [[26, "bluecast.eda.analyse.plot_tsne"]], "theil_u() (in module bluecast.eda.analyse)": [[26, "bluecast.eda.analyse.theil_u"]], "univariate_plots() (in module bluecast.eda.analyse)": [[26, "bluecast.eda.analyse.univariate_plots"]], "bluecast.eda.data_leakage_checks": [[27, "module-bluecast.eda.data_leakage_checks"]], "detect_categorical_leakage() (in module bluecast.eda.data_leakage_checks)": [[27, "bluecast.eda.data_leakage_checks.detect_categorical_leakage"]], "detect_leakage_via_correlation() (in module bluecast.eda.data_leakage_checks)": [[27, "bluecast.eda.data_leakage_checks.detect_leakage_via_correlation"]], "bluecast.eda": [[28, "module-bluecast.eda"]], "balanced_log_loss() (in module bluecast.evaluation.eval_metrics)": [[29, "bluecast.evaluation.eval_metrics.balanced_log_loss"]], "bluecast.evaluation.eval_metrics": [[29, "module-bluecast.evaluation.eval_metrics"]], "eval_classifier() (in module bluecast.evaluation.eval_metrics)": [[29, "bluecast.evaluation.eval_metrics.eval_classifier"]], "eval_regressor() (in module bluecast.evaluation.eval_metrics)": [[29, "bluecast.evaluation.eval_metrics.eval_regressor"]], "plot_lift_chart() (in module bluecast.evaluation.eval_metrics)": [[29, "bluecast.evaluation.eval_metrics.plot_lift_chart"]], "plot_probability_distribution() (in module bluecast.evaluation.eval_metrics)": [[29, "bluecast.evaluation.eval_metrics.plot_probability_distribution"]], "plot_roc_auc() (in module bluecast.evaluation.eval_metrics)": [[29, "bluecast.evaluation.eval_metrics.plot_roc_auc"]], "bluecast.evaluation": [[30, "module-bluecast.evaluation"]], "bluecast.evaluation.shap_values": [[31, "module-bluecast.evaluation.shap_values"]], "get_most_important_features_by_shap_values() (in module bluecast.evaluation.shap_values)": [[31, "bluecast.evaluation.shap_values.get_most_important_features_by_shap_values"]], "shap_dependence_plots() (in module bluecast.evaluation.shap_values)": [[31, "bluecast.evaluation.shap_values.shap_dependence_plots"]], "shap_explanations() (in module bluecast.evaluation.shap_values)": [[31, "bluecast.evaluation.shap_values.shap_explanations"]], "shap_waterfall_plot() (in module bluecast.evaluation.shap_values)": [[31, "bluecast.evaluation.shap_values.shap_waterfall_plot"]], "bluecast.experimentation": [[32, "module-bluecast.experimentation"]], "experimenttracker (class in bluecast.experimentation.tracking)": [[33, "bluecast.experimentation.tracking.ExperimentTracker"]], "add_results() (bluecast.experimentation.tracking.experimenttracker method)": [[33, "bluecast.experimentation.tracking.ExperimentTracker.add_results"]], "bluecast.experimentation.tracking": [[33, "module-bluecast.experimentation.tracking"]], "get_best_score() (bluecast.experimentation.tracking.experimenttracker method)": [[33, "bluecast.experimentation.tracking.ExperimentTracker.get_best_score"]], "retrieve_results_as_df() (bluecast.experimentation.tracking.experimenttracker method)": [[33, "bluecast.experimentation.tracking.ExperimentTracker.retrieve_results_as_df"]], "bluecast.general_utils.general_utils": [[34, "module-bluecast.general_utils.general_utils"]], "check_gpu_support() (in module bluecast.general_utils.general_utils)": [[34, "bluecast.general_utils.general_utils.check_gpu_support"]], "load_for_production() (in module bluecast.general_utils.general_utils)": [[34, "bluecast.general_utils.general_utils.load_for_production"]], "logger() (in module bluecast.general_utils.general_utils)": [[34, "bluecast.general_utils.general_utils.logger"]], "save_to_production() (in module bluecast.general_utils.general_utils)": [[34, "bluecast.general_utils.general_utils.save_to_production"]], "bluecast.general_utils": [[35, "module-bluecast.general_utils"]], "bluecast": [[36, "module-bluecast"]], "baseclassmlmodel (class in bluecast.ml_modelling.base_classes)": [[37, "bluecast.ml_modelling.base_classes.BaseClassMlModel"]], "baseclassmlregressionmodel (class in bluecast.ml_modelling.base_classes)": [[37, "bluecast.ml_modelling.base_classes.BaseClassMlRegressionModel"]], "predictedclasses (in module bluecast.ml_modelling.base_classes)": [[37, "bluecast.ml_modelling.base_classes.PredictedClasses"]], "predictedprobas (in module bluecast.ml_modelling.base_classes)": [[37, "bluecast.ml_modelling.base_classes.PredictedProbas"]], "bluecast.ml_modelling.base_classes": [[37, "module-bluecast.ml_modelling.base_classes"]], "fit() (bluecast.ml_modelling.base_classes.baseclassmlmodel method)": [[37, "bluecast.ml_modelling.base_classes.BaseClassMlModel.fit"]], "fit() (bluecast.ml_modelling.base_classes.baseclassmlregressionmodel method)": [[37, "bluecast.ml_modelling.base_classes.BaseClassMlRegressionModel.fit"]], "predict() (bluecast.ml_modelling.base_classes.baseclassmlmodel method)": [[37, "bluecast.ml_modelling.base_classes.BaseClassMlModel.predict"]], "predict() (bluecast.ml_modelling.base_classes.baseclassmlregressionmodel method)": [[37, "bluecast.ml_modelling.base_classes.BaseClassMlRegressionModel.predict"]], "bluecast.ml_modelling": [[38, "module-bluecast.ml_modelling"]], "xgboostmodel (class in bluecast.ml_modelling.xgboost)": [[39, "bluecast.ml_modelling.xgboost.XgboostModel"]], "_fine_tune_precise() (bluecast.ml_modelling.xgboost.xgboostmodel method)": [[39, "bluecast.ml_modelling.xgboost.XgboostModel._fine_tune_precise"]], "autotune() (bluecast.ml_modelling.xgboost.xgboostmodel method)": [[39, "bluecast.ml_modelling.xgboost.XgboostModel.autotune"]], "bluecast.ml_modelling.xgboost": [[39, "module-bluecast.ml_modelling.xgboost"]], "calculate_class_weights() (bluecast.ml_modelling.xgboost.xgboostmodel method)": [[39, "bluecast.ml_modelling.xgboost.XgboostModel.calculate_class_weights"]], "check_load_confs() (bluecast.ml_modelling.xgboost.xgboostmodel method)": [[39, "bluecast.ml_modelling.xgboost.XgboostModel.check_load_confs"]], "constant_loss_degregation_factor() (bluecast.ml_modelling.xgboost.xgboostmodel method)": [[39, "bluecast.ml_modelling.xgboost.XgboostModel.constant_loss_degregation_factor"]], "create_d_matrices() (bluecast.ml_modelling.xgboost.xgboostmodel method)": [[39, "bluecast.ml_modelling.xgboost.XgboostModel.create_d_matrices"]], "fine_tune() (bluecast.ml_modelling.xgboost.xgboostmodel method)": [[39, "bluecast.ml_modelling.xgboost.XgboostModel.fine_tune"]], "fit() (bluecast.ml_modelling.xgboost.xgboostmodel method)": [[39, "bluecast.ml_modelling.xgboost.XgboostModel.fit"]], "get_best_score() (bluecast.ml_modelling.xgboost.xgboostmodel method)": [[39, "bluecast.ml_modelling.xgboost.XgboostModel.get_best_score"]], "increasing_noise_evaluator() (bluecast.ml_modelling.xgboost.xgboostmodel method)": [[39, "bluecast.ml_modelling.xgboost.XgboostModel.increasing_noise_evaluator"]], "predict() (bluecast.ml_modelling.xgboost.xgboostmodel method)": [[39, "bluecast.ml_modelling.xgboost.XgboostModel.predict"]], "predict_proba() (bluecast.ml_modelling.xgboost.xgboostmodel method)": [[39, "bluecast.ml_modelling.xgboost.XgboostModel.predict_proba"]], "train_single_fold_model() (bluecast.ml_modelling.xgboost.xgboostmodel method)": [[39, "bluecast.ml_modelling.xgboost.XgboostModel.train_single_fold_model"]], "xgboostmodelregression (class in bluecast.ml_modelling.xgboost_regression)": [[40, "bluecast.ml_modelling.xgboost_regression.XgboostModelRegression"]], "_fine_tune_precise() (bluecast.ml_modelling.xgboost_regression.xgboostmodelregression method)": [[40, "bluecast.ml_modelling.xgboost_regression.XgboostModelRegression._fine_tune_precise"]], "autotune() (bluecast.ml_modelling.xgboost_regression.xgboostmodelregression method)": [[40, "bluecast.ml_modelling.xgboost_regression.XgboostModelRegression.autotune"]], "bluecast.ml_modelling.xgboost_regression": [[40, "module-bluecast.ml_modelling.xgboost_regression"]], "check_load_confs() (bluecast.ml_modelling.xgboost_regression.xgboostmodelregression method)": [[40, "bluecast.ml_modelling.xgboost_regression.XgboostModelRegression.check_load_confs"]], "constant_loss_degregation_factor() (bluecast.ml_modelling.xgboost_regression.xgboostmodelregression method)": [[40, "bluecast.ml_modelling.xgboost_regression.XgboostModelRegression.constant_loss_degregation_factor"]], "create_d_matrices() (bluecast.ml_modelling.xgboost_regression.xgboostmodelregression method)": [[40, "bluecast.ml_modelling.xgboost_regression.XgboostModelRegression.create_d_matrices"]], "fine_tune() (bluecast.ml_modelling.xgboost_regression.xgboostmodelregression method)": [[40, "bluecast.ml_modelling.xgboost_regression.XgboostModelRegression.fine_tune"]], "fit() (bluecast.ml_modelling.xgboost_regression.xgboostmodelregression method)": [[40, "bluecast.ml_modelling.xgboost_regression.XgboostModelRegression.fit"]], "get_best_score() (bluecast.ml_modelling.xgboost_regression.xgboostmodelregression method)": [[40, "bluecast.ml_modelling.xgboost_regression.XgboostModelRegression.get_best_score"]], "increasing_noise_evaluator() (bluecast.ml_modelling.xgboost_regression.xgboostmodelregression method)": [[40, "bluecast.ml_modelling.xgboost_regression.XgboostModelRegression.increasing_noise_evaluator"]], "predict() (bluecast.ml_modelling.xgboost_regression.xgboostmodelregression method)": [[40, "bluecast.ml_modelling.xgboost_regression.XgboostModelRegression.predict"]], "train_single_fold_model() (bluecast.ml_modelling.xgboost_regression.xgboostmodelregression method)": [[40, "bluecast.ml_modelling.xgboost_regression.XgboostModelRegression.train_single_fold_model"]], "datadrift (class in bluecast.monitoring.data_monitoring)": [[41, "bluecast.monitoring.data_monitoring.DataDrift"]], "_calculate_psi() (bluecast.monitoring.data_monitoring.datadrift method)": [[41, "bluecast.monitoring.data_monitoring.DataDrift._calculate_psi"]], "bluecast.monitoring.data_monitoring": [[41, "module-bluecast.monitoring.data_monitoring"]], "kolmogorov_smirnov_test() (bluecast.monitoring.data_monitoring.datadrift method)": [[41, "bluecast.monitoring.data_monitoring.DataDrift.kolmogorov_smirnov_test"]], "population_stability_index() (bluecast.monitoring.data_monitoring.datadrift method)": [[41, "bluecast.monitoring.data_monitoring.DataDrift.population_stability_index"]], "qqplot_two_samples() (bluecast.monitoring.data_monitoring.datadrift method)": [[41, "bluecast.monitoring.data_monitoring.DataDrift.qqplot_two_samples"]], "bluecast.monitoring": [[42, "module-bluecast.monitoring"]], "categoryencoderorchestrator (class in bluecast.preprocessing.category_encoder_orchestration)": [[43, "bluecast.preprocessing.category_encoder_orchestration.CategoryEncoderOrchestrator"]], "bluecast.preprocessing.category_encoder_orchestration": [[43, "module-bluecast.preprocessing.category_encoder_orchestration"]], "fit() (bluecast.preprocessing.category_encoder_orchestration.categoryencoderorchestrator method)": [[43, "bluecast.preprocessing.category_encoder_orchestration.CategoryEncoderOrchestrator.fit"]], "custompreprocessing (class in bluecast.preprocessing.custom)": [[44, "bluecast.preprocessing.custom.CustomPreprocessing"]], "bluecast.preprocessing.custom": [[44, "module-bluecast.preprocessing.custom"]], "fit_transform() (bluecast.preprocessing.custom.custompreprocessing method)": [[44, "bluecast.preprocessing.custom.CustomPreprocessing.fit_transform"]], "transform() (bluecast.preprocessing.custom.custompreprocessing method)": [[44, "bluecast.preprocessing.custom.CustomPreprocessing.transform"]], "bluecast.preprocessing.datetime_features": [[45, "module-bluecast.preprocessing.datetime_features"]], "date_converter() (in module bluecast.preprocessing.datetime_features)": [[45, "bluecast.preprocessing.datetime_features.date_converter"]], "targetlabelencoder (class in bluecast.preprocessing.encode_target_labels)": [[46, "bluecast.preprocessing.encode_target_labels.TargetLabelEncoder"]], "bluecast.preprocessing.encode_target_labels": [[46, "module-bluecast.preprocessing.encode_target_labels"]], "fit_label_encoder() (bluecast.preprocessing.encode_target_labels.targetlabelencoder method)": [[46, "bluecast.preprocessing.encode_target_labels.TargetLabelEncoder.fit_label_encoder"]], "fit_transform_target_labels() (bluecast.preprocessing.encode_target_labels.targetlabelencoder method)": [[46, "bluecast.preprocessing.encode_target_labels.TargetLabelEncoder.fit_transform_target_labels"]], "label_encoder_reverse_transform() (bluecast.preprocessing.encode_target_labels.targetlabelencoder method)": [[46, "bluecast.preprocessing.encode_target_labels.TargetLabelEncoder.label_encoder_reverse_transform"]], "label_encoder_transform() (bluecast.preprocessing.encode_target_labels.targetlabelencoder method)": [[46, "bluecast.preprocessing.encode_target_labels.TargetLabelEncoder.label_encoder_transform"]], "transform_target_labels() (bluecast.preprocessing.encode_target_labels.targetlabelencoder method)": [[46, "bluecast.preprocessing.encode_target_labels.TargetLabelEncoder.transform_target_labels"]], "rfecvselector (class in bluecast.preprocessing.feature_selection)": [[47, "bluecast.preprocessing.feature_selection.RFECVSelector"]], "bluecast.preprocessing.feature_selection": [[47, "module-bluecast.preprocessing.feature_selection"]], "fit_transform() (bluecast.preprocessing.feature_selection.rfecvselector method)": [[47, "bluecast.preprocessing.feature_selection.RFECVSelector.fit_transform"]], "transform() (bluecast.preprocessing.feature_selection.rfecvselector method)": [[47, "bluecast.preprocessing.feature_selection.RFECVSelector.transform"]], "featuretypedetector (class in bluecast.preprocessing.feature_types)": [[48, "bluecast.preprocessing.feature_types.FeatureTypeDetector"]], "bluecast.preprocessing.feature_types": [[48, "module-bluecast.preprocessing.feature_types"]], "cast_rest_columns_to_object() (bluecast.preprocessing.feature_types.featuretypedetector method)": [[48, "bluecast.preprocessing.feature_types.FeatureTypeDetector.cast_rest_columns_to_object"]], "fit_transform_feature_types() (bluecast.preprocessing.feature_types.featuretypedetector method)": [[48, "bluecast.preprocessing.feature_types.FeatureTypeDetector.fit_transform_feature_types"]], "identify_bool_columns() (bluecast.preprocessing.feature_types.featuretypedetector method)": [[48, "bluecast.preprocessing.feature_types.FeatureTypeDetector.identify_bool_columns"]], "identify_date_time_columns() (bluecast.preprocessing.feature_types.featuretypedetector method)": [[48, "bluecast.preprocessing.feature_types.FeatureTypeDetector.identify_date_time_columns"]], "identify_num_columns() (bluecast.preprocessing.feature_types.featuretypedetector method)": [[48, "bluecast.preprocessing.feature_types.FeatureTypeDetector.identify_num_columns"]], "transform_feature_types() (bluecast.preprocessing.feature_types.featuretypedetector method)": [[48, "bluecast.preprocessing.feature_types.FeatureTypeDetector.transform_feature_types"]], "bluecast.preprocessing": [[49, "module-bluecast.preprocessing"]], "bluecast.preprocessing.nulls_and_infs": [[50, "module-bluecast.preprocessing.nulls_and_infs"]], "fill_infinite_values() (in module bluecast.preprocessing.nulls_and_infs)": [[50, "bluecast.preprocessing.nulls_and_infs.fill_infinite_values"]], "fill_nulls() (in module bluecast.preprocessing.nulls_and_infs)": [[50, "bluecast.preprocessing.nulls_and_infs.fill_nulls"]], "onehotcategoryencoder (class in bluecast.preprocessing.onehot_encoding)": [[51, "bluecast.preprocessing.onehot_encoding.OneHotCategoryEncoder"]], "bluecast.preprocessing.onehot_encoding": [[51, "module-bluecast.preprocessing.onehot_encoding"]], "fit_transform() (bluecast.preprocessing.onehot_encoding.onehotcategoryencoder method)": [[51, "bluecast.preprocessing.onehot_encoding.OneHotCategoryEncoder.fit_transform"]], "transform() (bluecast.preprocessing.onehot_encoding.onehotcategoryencoder method)": [[51, "bluecast.preprocessing.onehot_encoding.OneHotCategoryEncoder.transform"]], "schemadetector (class in bluecast.preprocessing.schema_checks)": [[52, "bluecast.preprocessing.schema_checks.SchemaDetector"]], "bluecast.preprocessing.schema_checks": [[52, "module-bluecast.preprocessing.schema_checks"]], "fit() (bluecast.preprocessing.schema_checks.schemadetector method)": [[52, "bluecast.preprocessing.schema_checks.SchemaDetector.fit"]], "transform() (bluecast.preprocessing.schema_checks.schemadetector method)": [[52, "bluecast.preprocessing.schema_checks.SchemaDetector.transform"]], "binaryclasstargetencoder (class in bluecast.preprocessing.target_encoding)": [[53, "bluecast.preprocessing.target_encoding.BinaryClassTargetEncoder"]], "multiclasstargetencoder (class in bluecast.preprocessing.target_encoding)": [[53, "bluecast.preprocessing.target_encoding.MultiClassTargetEncoder"]], "bluecast.preprocessing.target_encoding": [[53, "module-bluecast.preprocessing.target_encoding"]], "fit_target_encode_binary_class() (bluecast.preprocessing.target_encoding.binaryclasstargetencoder method)": [[53, "bluecast.preprocessing.target_encoding.BinaryClassTargetEncoder.fit_target_encode_binary_class"]], "fit_target_encode_multiclass() (bluecast.preprocessing.target_encoding.multiclasstargetencoder method)": [[53, "bluecast.preprocessing.target_encoding.MultiClassTargetEncoder.fit_target_encode_multiclass"]], "transform_target_encode_binary_class() (bluecast.preprocessing.target_encoding.binaryclasstargetencoder method)": [[53, "bluecast.preprocessing.target_encoding.BinaryClassTargetEncoder.transform_target_encode_binary_class"]], "transform_target_encode_multiclass() (bluecast.preprocessing.target_encoding.multiclasstargetencoder method)": [[53, "bluecast.preprocessing.target_encoding.MultiClassTargetEncoder.transform_target_encode_multiclass"]], "bluecast.preprocessing.train_test_split": [[54, "module-bluecast.preprocessing.train_test_split"]], "train_test_split() (in module bluecast.preprocessing.train_test_split)": [[54, "bluecast.preprocessing.train_test_split.train_test_split"]], "train_test_split_cross() (in module bluecast.preprocessing.train_test_split)": [[54, "bluecast.preprocessing.train_test_split.train_test_split_cross"]], "train_test_split_time() (in module bluecast.preprocessing.train_test_split)": [[54, "bluecast.preprocessing.train_test_split.train_test_split_time"]], "bluecast.tests": [[55, "module-bluecast.tests"]], "bluecast.tests.make_data.create_data": [[56, "module-bluecast.tests.make_data.create_data"]], "create_synthetic_dataframe() (in module bluecast.tests.make_data.create_data)": [[56, "bluecast.tests.make_data.create_data.create_synthetic_dataframe"]], "create_synthetic_dataframe_regression() (in module bluecast.tests.make_data.create_data)": [[56, "bluecast.tests.make_data.create_data.create_synthetic_dataframe_regression"]], "create_synthetic_multiclass_dataframe() (in module bluecast.tests.make_data.create_data)": [[56, "bluecast.tests.make_data.create_data.create_synthetic_multiclass_dataframe"]], "bluecast.tests.make_data": [[57, "module-bluecast.tests.make_data"]], "bluecast.tests.test_analyse": [[58, "module-bluecast.tests.test_analyse"]], "create_data_with_many_uniques() (in module bluecast.tests.test_analyse)": [[58, "bluecast.tests.test_analyse.create_data_with_many_uniques"]], "create_data_with_nulls() (in module bluecast.tests.test_analyse)": [[58, "bluecast.tests.test_analyse.create_data_with_nulls"]], "synthetic_categorical_data() (in module bluecast.tests.test_analyse)": [[58, "bluecast.tests.test_analyse.synthetic_categorical_data"]], "synthetic_train_test_data() (in module bluecast.tests.test_analyse)": [[58, "bluecast.tests.test_analyse.synthetic_train_test_data"]], "synthetic_train_test_data_regression() (in module bluecast.tests.test_analyse)": [[58, "bluecast.tests.test_analyse.synthetic_train_test_data_regression"]], "test_bi_variate_plots() (in module bluecast.tests.test_analyse)": [[58, "bluecast.tests.test_analyse.test_bi_variate_plots"]], "test_check_unique_values() (in module bluecast.tests.test_analyse)": [[58, "bluecast.tests.test_analyse.test_check_unique_values"]], "test_correlation_heatmap() (in module bluecast.tests.test_analyse)": [[58, "bluecast.tests.test_analyse.test_correlation_heatmap"]], "test_correlation_to_target() (in module bluecast.tests.test_analyse)": [[58, "bluecast.tests.test_analyse.test_correlation_to_target"]], "test_mutual_info_to_target() (in module bluecast.tests.test_analyse)": [[58, "bluecast.tests.test_analyse.test_mutual_info_to_target"]], "test_mutual_info_to_target_multiclass() (in module bluecast.tests.test_analyse)": [[58, "bluecast.tests.test_analyse.test_mutual_info_to_target_multiclass"]], "test_mutual_info_to_target_regression() (in module bluecast.tests.test_analyse)": [[58, "bluecast.tests.test_analyse.test_mutual_info_to_target_regression"]], "test_pca_plot() (in module bluecast.tests.test_analyse)": [[58, "bluecast.tests.test_analyse.test_pca_plot"]], "test_plot_count_pairs() (in module bluecast.tests.test_analyse)": [[58, "bluecast.tests.test_analyse.test_plot_count_pairs"]], "test_plot_ecdf() (in module bluecast.tests.test_analyse)": [[58, "bluecast.tests.test_analyse.test_plot_ecdf"]], "test_plot_null_percentage() (in module bluecast.tests.test_analyse)": [[58, "bluecast.tests.test_analyse.test_plot_null_percentage"]], "test_plot_pca_cumulative_variance() (in module bluecast.tests.test_analyse)": [[58, "bluecast.tests.test_analyse.test_plot_pca_cumulative_variance"]], "test_plot_pie_chart() (in module bluecast.tests.test_analyse)": [[58, "bluecast.tests.test_analyse.test_plot_pie_chart"]], "test_plot_theil_u_heatmap() (in module bluecast.tests.test_analyse)": [[58, "bluecast.tests.test_analyse.test_plot_theil_u_heatmap"]], "test_plot_tsne() (in module bluecast.tests.test_analyse)": [[58, "bluecast.tests.test_analyse.test_plot_tsne"]], "test_univariate_plots() (in module bluecast.tests.test_analyse)": [[58, "bluecast.tests.test_analyse.test_univariate_plots"]], "custommodel (class in bluecast.tests.test_cast)": [[59, "bluecast.tests.test_cast.CustomModel"]], "bluecast.tests.test_cast": [[59, "module-bluecast.tests.test_cast"]], "bluecast_instance() (in module bluecast.tests.test_cast)": [[59, "bluecast.tests.test_cast.bluecast_instance"]], "fit() (bluecast.tests.test_cast.custommodel method)": [[59, "bluecast.tests.test_cast.CustomModel.fit"]], "predict() (bluecast.tests.test_cast.custommodel method)": [[59, "bluecast.tests.test_cast.CustomModel.predict"]], "synthetic_calibration_data() (in module bluecast.tests.test_cast)": [[59, "bluecast.tests.test_cast.synthetic_calibration_data"]], "synthetic_multiclass_train_test_data() (in module bluecast.tests.test_cast)": [[59, "bluecast.tests.test_cast.synthetic_multiclass_train_test_data"]], "synthetic_train_test_data() (in module bluecast.tests.test_cast)": [[59, "bluecast.tests.test_cast.synthetic_train_test_data"]], "test_bluecast_with_custom_model() (in module bluecast.tests.test_cast)": [[59, "bluecast.tests.test_cast.test_bluecast_with_custom_model"]], "test_blueprint_xgboost() (in module bluecast.tests.test_cast)": [[59, "bluecast.tests.test_cast.test_blueprint_xgboost"]], "test_cat_encoding_via_ml_algorithm_and_ml_model_warning() (in module bluecast.tests.test_cast)": [[59, "bluecast.tests.test_cast.test_cat_encoding_via_ml_algorithm_and_ml_model_warning"]], "test_class_problem_mismatch_warnings() (in module bluecast.tests.test_cast)": [[59, "bluecast.tests.test_cast.test_class_problem_mismatch_warnings"]], "test_enable_feature_selection_warning() (in module bluecast.tests.test_cast)": [[59, "bluecast.tests.test_cast.test_enable_feature_selection_warning"]], "test_hypertuning_cv_folds_warning() (in module bluecast.tests.test_cast)": [[59, "bluecast.tests.test_cast.test_hypertuning_cv_folds_warning"]], "test_min_features_to_select_warning() (in module bluecast.tests.test_cast)": [[59, "bluecast.tests.test_cast.test_min_features_to_select_warning"]], "test_missing_feature_selector_warning() (in module bluecast.tests.test_cast)": [[59, "bluecast.tests.test_cast.test_missing_feature_selector_warning"]], "test_missing_xgboost_tune_params_config_warning() (in module bluecast.tests.test_cast)": [[59, "bluecast.tests.test_cast.test_missing_xgboost_tune_params_config_warning"]], "test_precise_cv_tuning_warnings() (in module bluecast.tests.test_cast)": [[59, "bluecast.tests.test_cast.test_precise_cv_tuning_warnings"]], "test_shap_values_and_ml_algorithm_warning() (in module bluecast.tests.test_cast)": [[59, "bluecast.tests.test_cast.test_shap_values_and_ml_algorithm_warning"]], "bluecast.tests.test_cast_binary_conformal_prediction": [[60, "module-bluecast.tests.test_cast_binary_conformal_prediction"]], "test_bluecast_fit_binary_without_custom_model() (in module bluecast.tests.test_cast_binary_conformal_prediction)": [[60, "bluecast.tests.test_cast_binary_conformal_prediction.test_bluecast_fit_binary_without_custom_model"]], "customlrmodel (class in bluecast.tests.test_cast_cv)": [[61, "bluecast.tests.test_cast_cv.CustomLRModel"]], "bluecast.tests.test_cast_cv": [[61, "module-bluecast.tests.test_cast_cv"]], "fit() (bluecast.tests.test_cast_cv.customlrmodel method)": [[61, "bluecast.tests.test_cast_cv.CustomLRModel.fit"]], "predict() (bluecast.tests.test_cast_cv.customlrmodel method)": [[61, "bluecast.tests.test_cast_cv.CustomLRModel.predict"]], "synthetic_calibration_data() (in module bluecast.tests.test_cast_cv)": [[61, "bluecast.tests.test_cast_cv.synthetic_calibration_data"]], "synthetic_train_test_data() (in module bluecast.tests.test_cast_cv)": [[61, "bluecast.tests.test_cast_cv.synthetic_train_test_data"]], "test_bluecast_cv_fit_eval_with_custom_model() (in module bluecast.tests.test_cast_cv)": [[61, "bluecast.tests.test_cast_cv.test_bluecast_cv_fit_eval_with_custom_model"]], "test_blueprint_cv_xgboost() (in module bluecast.tests.test_cast_cv)": [[61, "bluecast.tests.test_cast_cv.test_blueprint_cv_xgboost"]], "bluecast.tests.test_cast_cv_binary_conformal_prediction": [[62, "module-bluecast.tests.test_cast_cv_binary_conformal_prediction"]], "test_bluecast_cv_fit_eval_binary_without_custom_model() (in module bluecast.tests.test_cast_cv_binary_conformal_prediction)": [[62, "bluecast.tests.test_cast_cv_binary_conformal_prediction.test_bluecast_cv_fit_eval_binary_without_custom_model"]], "customlrmodel (class in bluecast.tests.test_cast_cv_multiclass)": [[63, "bluecast.tests.test_cast_cv_multiclass.CustomLRModel"]], "bluecast.tests.test_cast_cv_multiclass": [[63, "module-bluecast.tests.test_cast_cv_multiclass"]], "fit() (bluecast.tests.test_cast_cv_multiclass.customlrmodel method)": [[63, "bluecast.tests.test_cast_cv_multiclass.CustomLRModel.fit"]], "predict() (bluecast.tests.test_cast_cv_multiclass.customlrmodel method)": [[63, "bluecast.tests.test_cast_cv_multiclass.CustomLRModel.predict"]], "test_bluecast_cv_fit_eval_multiclass_with_custom_model() (in module bluecast.tests.test_cast_cv_multiclass)": [[63, "bluecast.tests.test_cast_cv_multiclass.test_bluecast_cv_fit_eval_multiclass_with_custom_model"]], "bluecast.tests.test_cast_cv_multiclass_conformal_prediction": [[64, "module-bluecast.tests.test_cast_cv_multiclass_conformal_prediction"]], "test_bluecast_cv_fit_eval_multiclass_without_custom_model() (in module bluecast.tests.test_cast_cv_multiclass_conformal_prediction)": [[64, "bluecast.tests.test_cast_cv_multiclass_conformal_prediction.test_bluecast_cv_fit_eval_multiclass_without_custom_model"]], "customlrmodel (class in bluecast.tests.test_cast_cv_regression)": [[65, "bluecast.tests.test_cast_cv_regression.CustomLRModel"]], "custommodel (class in bluecast.tests.test_cast_cv_regression)": [[65, "bluecast.tests.test_cast_cv_regression.CustomModel"]], "mycustomlastmilepreprocessing (class in bluecast.tests.test_cast_cv_regression)": [[65, "bluecast.tests.test_cast_cv_regression.MyCustomLastMilePreprocessing"]], "bluecast.tests.test_cast_cv_regression": [[65, "module-bluecast.tests.test_cast_cv_regression"]], "custom_function() (bluecast.tests.test_cast_cv_regression.mycustomlastmilepreprocessing method)": [[65, "bluecast.tests.test_cast_cv_regression.MyCustomLastMilePreprocessing.custom_function"]], "fit() (bluecast.tests.test_cast_cv_regression.customlrmodel method)": [[65, "bluecast.tests.test_cast_cv_regression.CustomLRModel.fit"]], "fit() (bluecast.tests.test_cast_cv_regression.custommodel method)": [[65, "bluecast.tests.test_cast_cv_regression.CustomModel.fit"]], "fit_transform() (bluecast.tests.test_cast_cv_regression.mycustomlastmilepreprocessing method)": [[65, "bluecast.tests.test_cast_cv_regression.MyCustomLastMilePreprocessing.fit_transform"]], "predict() (bluecast.tests.test_cast_cv_regression.customlrmodel method)": [[65, "bluecast.tests.test_cast_cv_regression.CustomLRModel.predict"]], "predict() (bluecast.tests.test_cast_cv_regression.custommodel method)": [[65, "bluecast.tests.test_cast_cv_regression.CustomModel.predict"]], "synthetic_calibration_data() (in module bluecast.tests.test_cast_cv_regression)": [[65, "bluecast.tests.test_cast_cv_regression.synthetic_calibration_data"]], "synthetic_train_test_data() (in module bluecast.tests.test_cast_cv_regression)": [[65, "bluecast.tests.test_cast_cv_regression.synthetic_train_test_data"]], "test_bluecast_cv_fit_eval_with_custom_model() (in module bluecast.tests.test_cast_cv_regression)": [[65, "bluecast.tests.test_cast_cv_regression.test_bluecast_cv_fit_eval_with_custom_model"]], "test_bluecast_cv_with_custom_objects() (in module bluecast.tests.test_cast_cv_regression)": [[65, "bluecast.tests.test_cast_cv_regression.test_bluecast_cv_with_custom_objects"]], "test_blueprint_cv_xgboost() (in module bluecast.tests.test_cast_cv_regression)": [[65, "bluecast.tests.test_cast_cv_regression.test_blueprint_cv_xgboost"]], "transform() (bluecast.tests.test_cast_cv_regression.mycustomlastmilepreprocessing method)": [[65, "bluecast.tests.test_cast_cv_regression.MyCustomLastMilePreprocessing.transform"]], "custommodel (class in bluecast.tests.test_cast_regression)": [[66, "bluecast.tests.test_cast_regression.CustomModel"]], "bluecast.tests.test_cast_regression": [[66, "module-bluecast.tests.test_cast_regression"]], "bluecast_instance() (in module bluecast.tests.test_cast_regression)": [[66, "bluecast.tests.test_cast_regression.bluecast_instance"]], "fit() (bluecast.tests.test_cast_regression.custommodel method)": [[66, "bluecast.tests.test_cast_regression.CustomModel.fit"]], "predict() (bluecast.tests.test_cast_regression.custommodel method)": [[66, "bluecast.tests.test_cast_regression.CustomModel.predict"]], "synthetic_calibration_data() (in module bluecast.tests.test_cast_regression)": [[66, "bluecast.tests.test_cast_regression.synthetic_calibration_data"]], "synthetic_train_test_data() (in module bluecast.tests.test_cast_regression)": [[66, "bluecast.tests.test_cast_regression.synthetic_train_test_data"]], "test_bluecast_with_custom_model() (in module bluecast.tests.test_cast_regression)": [[66, "bluecast.tests.test_cast_regression.test_bluecast_with_custom_model"]], "test_blueprint_xgboost() (in module bluecast.tests.test_cast_regression)": [[66, "bluecast.tests.test_cast_regression.test_blueprint_xgboost"]], "test_cat_encoding_via_ml_algorithm_and_ml_model_warning() (in module bluecast.tests.test_cast_regression)": [[66, "bluecast.tests.test_cast_regression.test_cat_encoding_via_ml_algorithm_and_ml_model_warning"]], "test_enable_feature_selection_warning() (in module bluecast.tests.test_cast_regression)": [[66, "bluecast.tests.test_cast_regression.test_enable_feature_selection_warning"]], "test_hypertuning_cv_folds_warning() (in module bluecast.tests.test_cast_regression)": [[66, "bluecast.tests.test_cast_regression.test_hypertuning_cv_folds_warning"]], "test_min_features_to_select_warning() (in module bluecast.tests.test_cast_regression)": [[66, "bluecast.tests.test_cast_regression.test_min_features_to_select_warning"]], "test_missing_feature_selector_warning() (in module bluecast.tests.test_cast_regression)": [[66, "bluecast.tests.test_cast_regression.test_missing_feature_selector_warning"]], "test_missing_xgboost_tune_params_config_warning() (in module bluecast.tests.test_cast_regression)": [[66, "bluecast.tests.test_cast_regression.test_missing_xgboost_tune_params_config_warning"]], "test_precise_cv_tuning_warnings() (in module bluecast.tests.test_cast_regression)": [[66, "bluecast.tests.test_cast_regression.test_precise_cv_tuning_warnings"]], "test_shap_values_and_ml_algorithm_warning() (in module bluecast.tests.test_cast_regression)": [[66, "bluecast.tests.test_cast_regression.test_shap_values_and_ml_algorithm_warning"]], "bluecast.tests.test_category_encoder_orchestrator": [[67, "module-bluecast.tests.test_category_encoder_orchestrator"]], "encoder_orchestrator() (in module bluecast.tests.test_category_encoder_orchestrator)": [[67, "bluecast.tests.test_category_encoder_orchestrator.encoder_orchestrator"]], "sample_data() (in module bluecast.tests.test_category_encoder_orchestrator)": [[67, "bluecast.tests.test_category_encoder_orchestrator.sample_data"]], "test_fit_assigns_to_onehot_when_cardinality_below_threshold() (in module bluecast.tests.test_category_encoder_orchestrator)": [[67, "bluecast.tests.test_category_encoder_orchestrator.test_fit_assigns_to_onehot_when_cardinality_below_threshold"]], "test_fit_assigns_to_target_when_cardinality_above_threshold() (in module bluecast.tests.test_category_encoder_orchestrator)": [[67, "bluecast.tests.test_category_encoder_orchestrator.test_fit_assigns_to_target_when_cardinality_above_threshold"]], "bluecast.tests.test_check_gpu_support": [[68, "module-bluecast.tests.test_check_gpu_support"]], "test_check_gpu_support() (in module bluecast.tests.test_check_gpu_support)": [[68, "bluecast.tests.test_check_gpu_support.test_check_gpu_support"]], "bluecast.tests.test_conformal_prediction": [[69, "module-bluecast.tests.test_conformal_prediction"]], "test_calibrate() (in module bluecast.tests.test_conformal_prediction)": [[69, "bluecast.tests.test_conformal_prediction.test_calibrate"]], "test_predict() (in module bluecast.tests.test_conformal_prediction)": [[69, "bluecast.tests.test_conformal_prediction.test_predict"]], "test_predict_interval() (in module bluecast.tests.test_conformal_prediction)": [[69, "bluecast.tests.test_conformal_prediction.test_predict_interval"]], "test_predict_proba() (in module bluecast.tests.test_conformal_prediction)": [[69, "bluecast.tests.test_conformal_prediction.test_predict_proba"]], "test_predict_sets() (in module bluecast.tests.test_conformal_prediction)": [[69, "bluecast.tests.test_conformal_prediction.test_predict_sets"]], "bluecast.tests.test_conformal_prediction_evaluation": [[70, "module-bluecast.tests.test_conformal_prediction_evaluation"]], "test_prediction_interval_coverage() (in module bluecast.tests.test_conformal_prediction_evaluation)": [[70, "bluecast.tests.test_conformal_prediction_evaluation.test_prediction_interval_coverage"]], "test_prediction_set_coverage() (in module bluecast.tests.test_conformal_prediction_evaluation)": [[70, "bluecast.tests.test_conformal_prediction_evaluation.test_prediction_set_coverage"]], "bluecast.tests.test_conformal_prediction_regression": [[71, "module-bluecast.tests.test_conformal_prediction_regression"]], "test_calibrate() (in module bluecast.tests.test_conformal_prediction_regression)": [[71, "bluecast.tests.test_conformal_prediction_regression.test_calibrate"]], "test_predict() (in module bluecast.tests.test_conformal_prediction_regression)": [[71, "bluecast.tests.test_conformal_prediction_regression.test_predict"]], "test_predict_interval() (in module bluecast.tests.test_conformal_prediction_regression)": [[71, "bluecast.tests.test_conformal_prediction_regression.test_predict_interval"]], "test_predict_interval_with_single_data_point() (in module bluecast.tests.test_conformal_prediction_regression)": [[71, "bluecast.tests.test_conformal_prediction_regression.test_predict_interval_with_single_data_point"]], "test_predict_interval_with_single_quantile() (in module bluecast.tests.test_conformal_prediction_regression)": [[71, "bluecast.tests.test_conformal_prediction_regression.test_predict_interval_with_single_quantile"]], "bluecast.tests.test_custom_processing_base_class": [[72, "module-bluecast.tests.test_custom_processing_base_class"]], "custom_preprocessing() (in module bluecast.tests.test_custom_processing_base_class)": [[72, "bluecast.tests.test_custom_processing_base_class.custom_preprocessing"]], "test_fit_transform_returns_tuple() (in module bluecast.tests.test_custom_processing_base_class)": [[72, "bluecast.tests.test_custom_processing_base_class.test_fit_transform_returns_tuple"]], "test_transform_returns_optional_target() (in module bluecast.tests.test_custom_processing_base_class)": [[72, "bluecast.tests.test_custom_processing_base_class.test_transform_returns_optional_target"]], "test_transform_returns_optional_target_prediction_mode() (in module bluecast.tests.test_custom_processing_base_class)": [[72, "bluecast.tests.test_custom_processing_base_class.test_transform_returns_optional_target_prediction_mode"]], "test_transform_returns_tuple() (in module bluecast.tests.test_custom_processing_base_class)": [[72, "bluecast.tests.test_custom_processing_base_class.test_transform_returns_tuple"]], "bluecast.tests.test_data_leakage_checks": [[73, "module-bluecast.tests.test_data_leakage_checks"]], "create_to_target_correlated_categorical_features() (in module bluecast.tests.test_data_leakage_checks)": [[73, "bluecast.tests.test_data_leakage_checks.create_to_target_correlated_categorical_features"]], "create_to_target_correlated_features() (in module bluecast.tests.test_data_leakage_checks)": [[73, "bluecast.tests.test_data_leakage_checks.create_to_target_correlated_features"]], "test_detect_categorical_leakage() (in module bluecast.tests.test_data_leakage_checks)": [[73, "bluecast.tests.test_data_leakage_checks.test_detect_categorical_leakage"]], "test_detect_leakage_via_correlation() (in module bluecast.tests.test_data_leakage_checks)": [[73, "bluecast.tests.test_data_leakage_checks.test_detect_leakage_via_correlation"]], "bluecast.tests.test_data_monitoring": [[74, "module-bluecast.tests.test_data_monitoring"]], "mock_logger() (in module bluecast.tests.test_data_monitoring)": [[74, "bluecast.tests.test_data_monitoring.mock_logger"]], "test_kolmogorov_smirnov_test() (in module bluecast.tests.test_data_monitoring)": [[74, "bluecast.tests.test_data_monitoring.test_kolmogorov_smirnov_test"]], "test_population_stability_index() (in module bluecast.tests.test_data_monitoring)": [[74, "bluecast.tests.test_data_monitoring.test_population_stability_index"]], "test_qqplot_two_samples() (in module bluecast.tests.test_data_monitoring)": [[74, "bluecast.tests.test_data_monitoring.test_qqplot_two_samples"]], "bluecast.tests.test_datetime_features": [[75, "module-bluecast.tests.test_datetime_features"]], "sample_dataframe() (in module bluecast.tests.test_datetime_features)": [[75, "bluecast.tests.test_datetime_features.sample_dataframe"]], "test_date_converter() (in module bluecast.tests.test_datetime_features)": [[75, "bluecast.tests.test_datetime_features.test_date_converter"]], "bluecast.tests.test_effectiveness_nonconformity_measures": [[76, "module-bluecast.tests.test_effectiveness_nonconformity_measures"]], "create_synthetic_binary_data() (in module bluecast.tests.test_effectiveness_nonconformity_measures)": [[76, "bluecast.tests.test_effectiveness_nonconformity_measures.create_synthetic_binary_data"]], "create_synthetic_prediction_set() (in module bluecast.tests.test_effectiveness_nonconformity_measures)": [[76, "bluecast.tests.test_effectiveness_nonconformity_measures.create_synthetic_prediction_set"]], "test_avg_c() (in module bluecast.tests.test_effectiveness_nonconformity_measures)": [[76, "bluecast.tests.test_effectiveness_nonconformity_measures.test_avg_c"]], "test_one_c() (in module bluecast.tests.test_effectiveness_nonconformity_measures)": [[76, "bluecast.tests.test_effectiveness_nonconformity_measures.test_one_c"]], "bluecast.tests.test_encode_target_labels": [[77, "module-bluecast.tests.test_encode_target_labels"]], "label_encoder() (in module bluecast.tests.test_encode_target_labels)": [[77, "bluecast.tests.test_encode_target_labels.label_encoder"]], "sample_data() (in module bluecast.tests.test_encode_target_labels)": [[77, "bluecast.tests.test_encode_target_labels.sample_data"]], "test_fit_label_encoder() (in module bluecast.tests.test_encode_target_labels)": [[77, "bluecast.tests.test_encode_target_labels.test_fit_label_encoder"]], "test_fit_transform_target_labels() (in module bluecast.tests.test_encode_target_labels)": [[77, "bluecast.tests.test_encode_target_labels.test_fit_transform_target_labels"]], "test_label_encoder_reverse_transform() (in module bluecast.tests.test_encode_target_labels)": [[77, "bluecast.tests.test_encode_target_labels.test_label_encoder_reverse_transform"]], "test_label_encoder_transform() (in module bluecast.tests.test_encode_target_labels)": [[77, "bluecast.tests.test_encode_target_labels.test_label_encoder_transform"]], "test_transform_target_labels() (in module bluecast.tests.test_encode_target_labels)": [[77, "bluecast.tests.test_encode_target_labels.test_transform_target_labels"]], "trained_label_encoder() (in module bluecast.tests.test_encode_target_labels)": [[77, "bluecast.tests.test_encode_target_labels.trained_label_encoder"]], "bluecast.tests.test_experiment_tracker": [[78, "module-bluecast.tests.test_experiment_tracker"]], "experiment_tracker() (in module bluecast.tests.test_experiment_tracker)": [[78, "bluecast.tests.test_experiment_tracker.experiment_tracker"]], "test_add_results() (in module bluecast.tests.test_experiment_tracker)": [[78, "bluecast.tests.test_experiment_tracker.test_add_results"]], "test_get_best_score_empty() (in module bluecast.tests.test_experiment_tracker)": [[78, "bluecast.tests.test_experiment_tracker.test_get_best_score_empty"]], "test_get_best_score_higher_is_better() (in module bluecast.tests.test_experiment_tracker)": [[78, "bluecast.tests.test_experiment_tracker.test_get_best_score_higher_is_better"]], "test_get_best_score_lower_is_better() (in module bluecast.tests.test_experiment_tracker)": [[78, "bluecast.tests.test_experiment_tracker.test_get_best_score_lower_is_better"]], "test_retrieve_results_as_df() (in module bluecast.tests.test_experiment_tracker)": [[78, "bluecast.tests.test_experiment_tracker.test_retrieve_results_as_df"]], "bluecast.tests.test_feature_type_detector": [[79, "module-bluecast.tests.test_feature_type_detector"]], "test_feature_type_detector() (in module bluecast.tests.test_feature_type_detector)": [[79, "bluecast.tests.test_feature_type_detector.test_feature_type_detector"]], "bluecast.tests.test_fine_tune": [[80, "module-bluecast.tests.test_fine_tune"]], "test_fine_tune_runs_without_errors() (in module bluecast.tests.test_fine_tune)": [[80, "bluecast.tests.test_fine_tune.test_fine_tune_runs_without_errors"]], "test_fine_tune_runs_without_errors_using_cv() (in module bluecast.tests.test_fine_tune)": [[80, "bluecast.tests.test_fine_tune.test_fine_tune_runs_without_errors_using_cv"]], "xgboost_model() (in module bluecast.tests.test_fine_tune)": [[80, "bluecast.tests.test_fine_tune.xgboost_model"]], "bluecast.tests.test_load_for_production": [[81, "module-bluecast.tests.test_load_for_production"]], "test_load_for_production() (in module bluecast.tests.test_load_for_production)": [[81, "bluecast.tests.test_load_for_production.test_load_for_production"]], "test_load_for_production_with_default_file_type() (in module bluecast.tests.test_load_for_production)": [[81, "bluecast.tests.test_load_for_production.test_load_for_production_with_default_file_type"]], "bluecast.tests.test_nonconformity_measures": [[82, "module-bluecast.tests.test_nonconformity_measures"]], "create_synthetic_binary_data() (in module bluecast.tests.test_nonconformity_measures)": [[82, "bluecast.tests.test_nonconformity_measures.create_synthetic_binary_data"]], "create_synthetic_multiclass_data() (in module bluecast.tests.test_nonconformity_measures)": [[82, "bluecast.tests.test_nonconformity_measures.create_synthetic_multiclass_data"]], "test_brier_score() (in module bluecast.tests.test_nonconformity_measures)": [[82, "bluecast.tests.test_nonconformity_measures.test_brier_score"]], "test_hinge_loss() (in module bluecast.tests.test_nonconformity_measures)": [[82, "bluecast.tests.test_nonconformity_measures.test_hinge_loss"]], "test_margin_nonconformity_measure() (in module bluecast.tests.test_nonconformity_measures)": [[82, "bluecast.tests.test_nonconformity_measures.test_margin_nonconformity_measure"]], "bluecast.tests.test_nonconformity_measures_regression": [[83, "module-bluecast.tests.test_nonconformity_measures_regression"]], "create_synthetic_regression_data() (in module bluecast.tests.test_nonconformity_measures_regression)": [[83, "bluecast.tests.test_nonconformity_measures_regression.create_synthetic_regression_data"]], "test_absolute_error_loss() (in module bluecast.tests.test_nonconformity_measures_regression)": [[83, "bluecast.tests.test_nonconformity_measures_regression.test_absolute_error_loss"]], "test_normalized_error_error_loss() (in module bluecast.tests.test_nonconformity_measures_regression)": [[83, "bluecast.tests.test_nonconformity_measures_regression.test_normalized_error_error_loss"]], "bluecast.tests.test_nulls_and_infs": [[84, "module-bluecast.tests.test_nulls_and_infs"]], "test_fill_infinite_values() (in module bluecast.tests.test_nulls_and_infs)": [[84, "bluecast.tests.test_nulls_and_infs.test_fill_infinite_values"]], "test_fill_nulls() (in module bluecast.tests.test_nulls_and_infs)": [[84, "bluecast.tests.test_nulls_and_infs.test_fill_nulls"]], "bluecast.tests.test_onehot_encoding": [[85, "module-bluecast.tests.test_onehot_encoding"]], "example_data() (in module bluecast.tests.test_onehot_encoding)": [[85, "bluecast.tests.test_onehot_encoding.example_data"]], "test_fit_transform() (in module bluecast.tests.test_onehot_encoding)": [[85, "bluecast.tests.test_onehot_encoding.test_fit_transform"]], "test_transform() (in module bluecast.tests.test_onehot_encoding)": [[85, "bluecast.tests.test_onehot_encoding.test_transform"]], "dummyclass (class in bluecast.tests.test_save_to_production)": [[86, "bluecast.tests.test_save_to_production.DummyClass"]], "bluecast.tests.test_save_to_production": [[86, "module-bluecast.tests.test_save_to_production"]], "test_save_to_production() (in module bluecast.tests.test_save_to_production)": [[86, "bluecast.tests.test_save_to_production.test_save_to_production"]], "bluecast.tests.test_schema_checks": [[87, "module-bluecast.tests.test_schema_checks"]], "test_transform_extra_columns() (in module bluecast.tests.test_schema_checks)": [[87, "bluecast.tests.test_schema_checks.test_transform_extra_columns"]], "test_transform_missing_columns() (in module bluecast.tests.test_schema_checks)": [[87, "bluecast.tests.test_schema_checks.test_transform_missing_columns"]], "test_transform_same_schema() (in module bluecast.tests.test_schema_checks)": [[87, "bluecast.tests.test_schema_checks.test_transform_same_schema"]], "bluecast.tests.test_shap_explanations": [[88, "module-bluecast.tests.test_shap_explanations"]], "mock_model() (in module bluecast.tests.test_shap_explanations)": [[88, "bluecast.tests.test_shap_explanations.mock_model"]], "test_data() (in module bluecast.tests.test_shap_explanations)": [[88, "bluecast.tests.test_shap_explanations.test_data"]], "test_eval_classifier_except() (in module bluecast.tests.test_shap_explanations)": [[88, "bluecast.tests.test_shap_explanations.test_eval_classifier_except"]], "test_shap_dependence_plots() (in module bluecast.tests.test_shap_explanations)": [[88, "bluecast.tests.test_shap_explanations.test_shap_dependence_plots"]], "test_shap_explanations() (in module bluecast.tests.test_shap_explanations)": [[88, "bluecast.tests.test_shap_explanations.test_shap_explanations"]], "test_shap_waterfall_plot() (in module bluecast.tests.test_shap_explanations)": [[88, "bluecast.tests.test_shap_explanations.test_shap_waterfall_plot"]], "bluecast.tests.test_target_encoding_binary": [[89, "module-bluecast.tests.test_target_encoding_binary"]], "sample_data() (in module bluecast.tests.test_target_encoding_binary)": [[89, "bluecast.tests.test_target_encoding_binary.sample_data"]], "test_transform_target_encode_binary_class() (in module bluecast.tests.test_target_encoding_binary)": [[89, "bluecast.tests.test_target_encoding_binary.test_transform_target_encode_binary_class"]], "bluecast.tests.test_target_encoding_multiclass": [[90, "module-bluecast.tests.test_target_encoding_multiclass"]], "test_multi_class_target_encoder() (in module bluecast.tests.test_target_encoding_multiclass)": [[90, "bluecast.tests.test_target_encoding_multiclass.test_multi_class_target_encoder"]], "bluecast.tests.test_train_test_split": [[91, "module-bluecast.tests.test_train_test_split"]], "test_train_test_split_cross() (in module bluecast.tests.test_train_test_split)": [[91, "bluecast.tests.test_train_test_split.test_train_test_split_cross"]], "test_train_test_split_time() (in module bluecast.tests.test_train_test_split)": [[91, "bluecast.tests.test_train_test_split.test_train_test_split_time"]], "author (in module conf)": [[92, "conf.author"]], "autoapi_dirs (in module conf)": [[92, "conf.autoapi_dirs"]], "autoapi_type (in module conf)": [[92, "conf.autoapi_type"]], "conf": [[92, "module-conf"]], "copyright (in module conf)": [[92, "conf.copyright"]], "exclude_patterns (in module conf)": [[92, "conf.exclude_patterns"]], "extensions (in module conf)": [[92, "conf.extensions"]], "html_static_path (in module conf)": [[92, "conf.html_static_path"]], "html_theme (in module conf)": [[92, "conf.html_theme"]], "myst_heading_anchors (in module conf)": [[92, "conf.myst_heading_anchors"]], "project (in module conf)": [[92, "conf.project"]], "release (in module conf)": [[92, "conf.release"]], "source_parsers (in module conf)": [[92, "conf.source_parsers"]], "source_suffix (in module conf)": [[92, "conf.source_suffix"]], "templates_path (in module conf)": [[92, "conf.templates_path"]]}})
