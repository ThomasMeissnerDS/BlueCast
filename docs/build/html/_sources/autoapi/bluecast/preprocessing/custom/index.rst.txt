:py:mod:`bluecast.preprocessing.custom`
=======================================

.. py:module:: bluecast.preprocessing.custom

.. autoapi-nested-parse::

   This module contains the CustomPreprocessing class. This is an entry point for last mile computations before model
   training or tuning.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   bluecast.preprocessing.custom.CustomPreprocessing




.. py:class:: CustomPreprocessing(trained_patterns: Optional[Any] = None)


   Bases: :py:obj:`abc.ABC`

   This class is an entry point for last mile computations before model training or tuning. It is an abstract class
   and must be extended by the user. For fit_transform x_train and y_train are passed. For transform x_test and y_test
   are passed in the BlueCast pipeline. Use prediction_mode = False to skip processing the missing targets.
   :param trained_patterns: Optional. Can we used to save anything from training to be loaded and used in transform.
   If more placeholders are needed, use a dictionary.

   .. py:method:: fit_transform(df: pandas.DataFrame, target: pandas.Series) -> Tuple[pandas.DataFrame, pandas.Series]
      :abstractmethod:


   .. py:method:: transform(df: pandas.DataFrame, target: Optional[pandas.Series] = None, predicton_mode: bool = False) -> Tuple[pandas.DataFrame, Optional[pandas.Series]]
      :abstractmethod:

      Use prediction mode to not process the missing target during inference.



