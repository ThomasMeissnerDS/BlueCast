:py:mod:`bluecast.blueprints.cast_cv`
=====================================

.. py:module:: bluecast.blueprints.cast_cv


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   bluecast.blueprints.cast_cv.BlueCastCV




.. py:class:: BlueCastCV(class_problem: Literal[binary, multiclass] = 'binary', stratifier: Optional[Any] = None, conf_training: Optional[bluecast.config.training_config.TrainingConfig] = None, conf_xgboost: Optional[bluecast.config.training_config.XgboostTuneParamsConfig] = None, conf_params_xgboost: Optional[bluecast.config.training_config.XgboostFinalParamConfig] = None, experiment_tracker: Optional[bluecast.experimentation.tracking.ExperimentTracker] = None, custom_in_fold_preprocessor: Optional[bluecast.preprocessing.custom.CustomPreprocessing] = None, custom_last_mile_computation: Optional[bluecast.preprocessing.custom.CustomPreprocessing] = None, custom_preprocessor: Optional[bluecast.preprocessing.custom.CustomPreprocessing] = None, custom_feature_selector: Optional[Union[bluecast.preprocessing.feature_selection.RFECVSelector, bluecast.preprocessing.custom.CustomPreprocessing]] = None, ml_model: Optional[Union[bluecast.ml_modelling.xgboost.XgboostModel, Any]] = None)


   Wrapper to train and predict multiple blueCast intstances.

   Check the BlueCast class documentation for additional parameter details.
   A custom splitter can be provided.

   .. py:method:: prepare_data(df: pandas.DataFrame, target: str) -> Tuple[pandas.DataFrame, pandas.Series]


   .. py:method:: show_oof_scores(metric: str = 'matthews') -> Tuple[float, float]

      Show out of fold scores.

      When calling BlueCastCVRegression's fit_eval function multiple BlueCastRegression
      instances are called and each of them predicts on unseen/oof data.

      This function collects these scores and return mean and average of them.

      :param metric: String indicating which metric shall be returned.
      :return: Tuple with (mean, std) of oof scores


   .. py:method:: fit(df: pandas.DataFrame, target_col: str) -> None

      Fit multiple BlueCast instances on different data splits.

      Input df is expected the target column.


   .. py:method:: fit_eval(df: pandas.DataFrame, target_col: str) -> Tuple[float, float]

      Fit multiple BlueCast instances on different data splits.

      Input df is expected the target column. Evaluation is executed on out-of-fold dataset.
      in each split.
      :param df: Pandas DataFrame that includes the target column
      :param target_col: String indicating the name of the target column
      :returns Tuple of (oof_mean, oof_std) with scores on unseen data during eval


   .. py:method:: predict(df: pandas.DataFrame, return_sub_models_preds: bool = False) -> Tuple[Union[pandas.DataFrame, pandas.Series], Union[pandas.DataFrame, pandas.Series]]

      Predict on unseen data using multiple trained BlueCast instances


   .. py:method:: predict_proba(df: pandas.DataFrame, return_sub_models_preds: bool = False) -> Union[pandas.DataFrame, pandas.Series]

      Predict on unseen data using multiple trained BlueCast instances


   .. py:method:: calibrate(x_calibration: pandas.DataFrame, y_calibration: pandas.Series, **kwargs) -> None

      Calibrate the model.

      Via this function the nonconformity measures are taken and used to predict calibrated sets via the
      predict_sets function, or to return p-values of a row for being the class via the predict_p_values function.
      This calibrates the blended prediction of all sub models.
      :param: x_calibration: Pandas DataFrame without target column, that has not been seen by the model during
          training.
      :param y_calibration: Pandas Series holding the target value, hat has not been seen by the model during
          training.


   .. py:method:: predict_p_values(df: pandas.DataFrame) -> numpy.ndarray

      Create p-values for each class.

      The p_values indicate the probability of being the correct class.
      :param df: Pandas DataFrame holding unseen data
      :returns: Numpy array where each column holds p-values of a row being the class. If string labels were passed
          each column maps the index of target_label_encoder.target_label_mapping stored in this class.


   .. py:method:: predict_sets(df: pandas.DataFrame, alpha: float = 0.05) -> pandas.DataFrame

      Create prediction sets based on a certain confidence level.

      Conformal prediction guarantees, that the correct label is present in the prediction sets with a probability of
      1 - alpha.
      :param df: Pandas DataFrame holding unseen data
      :param alpha: Float indicating the desired confidence level.
      :returns a Pandas DataFrame with a column called 'prediction_set' holding a nested set with predicted classes.
